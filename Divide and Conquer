1)Merge Sort

public class Basics{

    public static void mergesort(int arr[], int si, int ei){
        //basecase
        if(si>=ei){
            return;
        }
          //mid calculate
          int mid=si+(ei-si)/2;
          
        //recursion call
        mergesort(arr,0,mid);//recursion call for left part
        mergesort(arr,mid+1,ei);//recursion call for right part

        //final merge left and right part in temp array
        merge(arr,si,ei,mid);
    }

    public static void merge(int arr[], int si, int ei, int mid){
        //creating temperary array
        int temp[]= new int[ei-si+1];

        int i=si;//iterator for left part
        int j=mid+1;//iterator for right part
        int k=0;//iterator for temp array

        while(i<=mid && j<=ei){
            if(arr[i]<arr[j]){
                temp[k++]=arr[i++];
            }
            else{
                temp[k++]= arr[j++];
            }
        }

        //remaining left part elements
        while(i<=mid){
            temp[k++]= arr[i++];
        }

        //remaining right part elements
        while(j<=ei){
            temp[k++] =arr[j++];
        }


        //copying temp array in final array
        for(k=0,i=si;k<temp.length;k++,i++){
            arr[i]= temp[k];
        }
    }

    public static void printArr(int arr[]){
        for(int i=0;i<arr.length;i++){
            System.out.print(arr[i] + " ");
        }
    }
    public static void main(String[] args) {
        int arr[]= {6,5,3,2,8,9,-1};
        mergesort(arr, 0, arr.length-1);
        printArr(arr);
    }
    
}


2) Quick Sort

public class Basics{

    public static void quickSort(int arr[], int si, int ei){
        //basecase
        if(si>=ei){
            return;
        }
        //lastelement
        int pivotidx =partition(arr,si,ei);
        quickSort(arr,si,pivotidx -1);//left part
        quickSort(arr,pivotidx+1,ei);//right part
    }

    public static int partition(int arr[], int si, int ei){
        //last element
        int pivot =arr[ei];
        int i =si-1;
        for(int j=si;j<ei;j++){
            if(arr[j]<=pivot){
                i++;
                //swap
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        i++;
        int temp =arr[i];
        arr[i] = arr[ei];
        arr[ei] = temp;
        return i;
    }


    public static void printArr(int arr[]){
        for(int i=0;i<arr.length;i++){
            System.out.print(arr[i] + " ");
        }
    }
    public static void main(String[] args) {
        int arr[]={6,3,9,8,2,5};
        quickSort(arr,0,arr.length-1);
        printArr(arr);
    }
}


3) Search in Rotated and Sorted array

public class JavaBasics {

    public static int search(int arr[], int target, int si, int ei) {

        // basecase
        if (si > ei) {
            return -1;
        }

        // kaam
        int mid = si + (ei - si) / 2;

        // case found- mid=target

        if (arr[mid] == target) {
            return mid;
        }

        // mid on l1
        if (arr[si] <= arr[mid]) {
            // case a:left
            if (arr[si] <= target && target <= arr[mid]) {
                return search(arr, target, si, mid - 1);
            } else {
                // case b:right
                return search(arr, target, mid + 1, ei);
            }
        }

        // mid on l2
        else {
            // case c:right
            if (arr[mid] <= target && target <= arr[ei]) {
                return search(arr, target, mid + 1, ei);
            } else {
                // case d:left
                return search(arr, target, si, mid - 1);
            }
        }
    }

    public static void main(String[] args) {
        int arr[] = { 4, 5, 6, 7, 0, 1, 2 };
        int target = 6;
        int tarIdx = search(arr, target, 0, arr.length - 1);
        System.out.println(tarIdx);
    }
}
