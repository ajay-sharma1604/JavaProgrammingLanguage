1)Merge Sort

public class Basics{

    public static void mergesort(int arr[], int si, int ei){
        //basecase
        if(si>=ei){
            return;
        }
          //mid calculate
          int mid=si+(ei-si)/2;
          
        //recursion call
        mergesort(arr,0,mid);//recursion call for left part
        mergesort(arr,mid+1,ei);//recursion call for right part

        //final merge left and right part in temp array
        merge(arr,si,ei,mid);
    }

    public static void merge(int arr[], int si, int ei, int mid){
        //creating temperary array
        int temp[]= new int[ei-si+1];

        int i=si;//iterator for left part
        int j=mid+1;//iterator for right part
        int k=0;//iterator for temp array

        while(i<=mid && j<=ei){
            if(arr[i]<arr[j]){
                temp[k++]=arr[i++];
            }
            else{
                temp[k++]= arr[j++];
            }
        }

        //remaining left part elements
        while(i<=mid){
            temp[k++]= arr[i++];
        }

        //remaining right part elements
        while(j<=ei){
            temp[k++] =arr[j++];
        }


        //copying temp array in final array
        for(k=0,i=si;k<temp.length;k++,i++){
            arr[i]= temp[k];
        }
    }

    public static void printArr(int arr[]){
        for(int i=0;i<arr.length;i++){
            System.out.print(arr[i] + " ");
        }
    }
    public static void main(String[] args) {
        int arr[]= {6,5,3,2,8,9,-1};
        mergesort(arr, 0, arr.length-1);
        printArr(arr);
    }
    
}
