 ------------------------------------------------------ HashMap Operations------------------------------------------

import java.util.HashMap;

public class Basics {

    public static void main(String args[]) {
        // create HashMap
        HashMap<String, Integer> hm = new HashMap<>();

        // Insert -O(1)
        hm.put("India", 100);
        hm.put("China", 150);
        hm.put("US", 50);

        // print
        System.out.println(hm);

        // Get -O(1)
        int population = hm.get("India");
        System.out.println(population);

        System.out.println(hm.get("Indonesia")); // passsing invalid key

        // ContainsKey() -O(1)

        System.out.println(hm.containsKey("India")); // true
        System.out.println(hm.containsKey("Indonesia"));// false

        // remove -O(1)
        System.out.println(hm.remove("India"));
        System.out.println(hm);

        System.out.println(hm.remove("Indonesia")); // invalid key
        System.out.println(hm);

        // Size
        System.out.println(hm.size());

        // isEmpty
        System.out.println(hm.isEmpty());

        // clear
        hm.clear();
        System.out.println(hm.isEmpty());
    }

}
------------------------------------------------------------------------------------------------------------------
                                        Iteration on HashMap

import java.util.*;

public class Basics {
    public static void main(String[] args) {
        HashMap<String, Integer> hm = new HashMap<>();
        hm.put("China", 100);
        hm.put("India", 150);
        hm.put("US", 50);
        hm.put("Indonesia", 6);
        hm.put("Nepal", 5);

        // Iterate through keyset
        Set<String> keys = hm.keySet();
        System.out.println(keys);

        for (String k : keys) {
            System.out.println("key=" + k + ",value=" + hm.get(k));
        }
    }
}


------------------------------------------------------------------------------------------------------------------

                                                HashMap Implementation code


import java.util.*;
import java.util.LinkedList;

public class HashMapCode {

    static class HashMap<K, V> {// generic
        private class Node {
            K key;
            V value;

            public Node(K key, V value) {
                this.key = key;
                this.value = value;
            }
        }

        private int n; // n
        private int N; // N
        private LinkedList<Node> buckets[];// N =buckets.length

        @SuppressWarnings("unchecked")
        public HashMap() {

            this.N = 4;
            this.buckets = new LinkedList[4]; // create bucket of type ll
            for (int i = 0; i < 4; i++) {
                this.buckets[i] = new LinkedList<>();// created empty ll in each bucket
            }
        }

        // ----------------------------------------------------------------------------------

        // Implementing put() function - O(lamda)= O(1)

        private int hashFunction(K key) {
            int hc = key.hashCode();
            return Math.abs(hc) % N;
        }

        private int SearchInLL(K key, int bi) {
            LinkedList<Node> ll = buckets[bi];
            int di = 0;

            for (int i = 0; i < ll.size(); i++) {
                Node node = ll.get(i);
                if (node.key == key) {
                    return di;
                }
                di++;
            }
            return -1;
        }

        @SuppressWarnings("unchecked")
        private void rehash() {
            LinkedList<Node> oldBuck[] = buckets;
            buckets = new LinkedList[N * 2];
            N = 2 * N;
            for (int i = 0; i < buckets.length; i++) {
                buckets[i] = new LinkedList<>();
            }

            // nodes ->add in bucket
            for (int i = 0; i < oldBuck.length; i++) {
                LinkedList<Node> ll = oldBuck[i];
                for (int j = 0; j < ll.size(); i++) {
                    Node node = ll.remove();
                    put(node.key, node.value);
                }
            }
        }

        public void put(K key, V value) {
            int bi = hashFunction(key); // 0 to 3
            int di = SearchInLL(key, bi);// valid; -1

            if (di != -1) { // valid case -key already exists in ll,value update
                Node node = buckets[bi].get(di);
                node.value = value;
            } else {// new node create
                buckets[bi].add(new Node(key, value));
                n++;
            }

            double lambda = (double) n / N; // decimal values
            if (lambda > 2.0) { // eg threshold value=2.0
                rehash();
            }
        }

        // Implementing containsKey() function -O(1)

        public boolean containsKey(K key) {
            int bi = hashFunction(key);
            int di = SearchInLL(key, bi);

            if (di != -1) {
                return true; // valid case
            } else {
                return false;// invalid case
            }
        }

        // Implementing get() function -O(1)
        public V get(K key) {
            int bi = hashFunction(key);
            int di = SearchInLL(key, bi);

            if (di != -1) { // valid case
                Node node = buckets[bi].get(di); // node where key exist
                return node.value;

            } else {
                return null;
            }
        }

        // Implementing remove() function -O(1)
        public V remove(K key) {
            int bi = hashFunction(key); // 0 to 3
            int di = SearchInLL(key, bi);// valid; -1

            if (di != -1) {
                Node node = buckets[bi].remove(di);
                n--;
                return node.value;
            } else {
                return null; // node doesnt exist
            }
        }

        // Implemeting KeySet() function
        public ArrayList<K> keySet() { // return arraylist of key
            ArrayList<K> keys = new ArrayList<>();

            for (int i = 0; i < buckets.length; i++) {
                LinkedList<Node> ll = buckets[i];
                for (Node node : ll) {
                    keys.add(node.key);
                }
            }
            return keys;
        }

        // Implementing isEmpty() function
        public boolean isEmpty() {
            return n == 0;
        }

        public static void main(String[] args) {
            HashMap<String, Integer> hm = new HashMap<>(); // we are using HashMap class,this is not inbuilt HashMap
            hm.put("India", 100);
            hm.put("China", 150);
            hm.put("US", 50);
            hm.put("Nepal", 5);

            ArrayList<String> keys = hm.keySet();
            for (String key : keys) {
                System.out.println(key);
            }

            System.out.println(hm.get("India"));
            System.out.println(hm.remove("India"));
            System.out.println(hm.get("India"));
        }
    }
}

