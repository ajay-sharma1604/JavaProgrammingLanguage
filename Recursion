---------------------Print numbers in decreasing order---------------------


public class Basics{

    public static void printDecreasing(int n){
        if(n==1){
            System.out.println(n);
            return;
        }
        System.out.print(n + " ");
        printDecreasing(n-1);
    }

    public static void main(String[] args) {
        int n=10;
        printDecreasing(n);
    }
}


------------------------Print numbers in increasing order-----------------------

public class Basics{

    public static void printIncreasing(int n){
    
    if(n==1){//base case
        System.out.print(n+ " ");
        return;
    }
       printIncreasing(n-1);
       System.out.print(n+ " ");
    }

    public static void main(String[] args) {
        int n =10;
        printIncreasing(n);
    }
}

-----------------------------another method 

public class Basics{

    public static void printIncreasing(int n){
        if(n==10){
            System.out.println(n);
            return;
        }
        System.out.print(n+" ");
        printIncreasing(n+1);
    }

    public static void main(String[] args) {
        int n =1;
        printIncreasing(n);
    }
}


-------------------- Find Factorial of a number

public class Basics{

    public static int printFact(int n){

        if(n==0){//0!=1
            return 1 ;
        }
        int factnminusone = printFact(n-1);
        int factn= (n*factnminusone);
        return factn;
    }
    public static void main(String[] args) {
        int n=4;
        System.out.println(printFact(n));
    }



-------------------------------------------Print sum of first n natural numbers

public class Basics{

    public static int printFirstN(int n){
        if(n==1){
            return 1;
        }
        int value=printFirstN(n-1);
        int sum =(n + value);
        return sum;
    }
    public static void main(String[] args) {
        int n=10;
        System.out.println(printFirstN(n));
    }
}


-------------------------------- Print Nth Fibonacci Number

public class Basics{

    public static int fib(int n){

        if(n==0 || n==1){
            return n;
        }
        int fibnm1 =fib(n-1);
        int fibnm2 =fib(n-2);
        int fibn =fibnm1 +fibnm2;
        return fibn;
    }
    public static void main(String[] args) {
        int n=6;
        System.out.println(fib(n));
    }
}

--------------------------------------  Check if the array is sorted or not

public class Basics{

    public static boolean sortedArray(int arr[] ,int i){
        if(i ==arr.length-1){//basecase
            return true;
        }
        if(arr[i] > arr[i+1]){
            return false;
        }
        return sortedArray(arr, i+1);
    }
    public static void main(String[] args) {
        int arr[] ={1,2,3,4,5};
        int i=0;
        System.out.println(sortedArray(arr, i));

    }
}


--------------------------------- Find the first occurence of an element in an array

public class Basics{

    public static int firstOcc(int arr[], int num, int i){

        if(i==arr.length){//basecase 
            return -1;
        }
        if(arr[i]==num){
            return i;
        }
       
        return firstOcc(arr, num, i+1);
    }
    public static void main(String[] args) {
        int arr[]={1,2,3,4,4,5,6,7,6,9,8};
        System.out.println(firstOcc(arr, 12, 0));
    }
}


----------------------------------Find the last occurence of an elemen in an array

public class Basics{

    public static int lastOcc(int arr[], int key, int i){
        //Basecase
        if(i==0){
            return -1;
        }
        if(arr[i-1]==key){
            return i-1;
        }
        return lastOcc(arr, key, i-1);
    }
    public static void main(String[] args) {
        int arr[]={8,5,2,3,6,9,9,6,5};
        System.out.println(lastOcc(arr,5,arr.length));
    }
}


-------------------------Print x to the power n

public class Basics{

    public static int calPower(int x, int n){
       //Basecase
       if(n==0){
            return 1;
        }
        return x*calPower(x,n-1);
    }
    public static void main(String[] args) {
        System.out.println(calPower(2,10));
    }
}



-------------Optimized 0(n) to 0(logn)

public class Basics{

    public static int optimizedPower(int a, int n){
        //Basecase
        if(n==0){
            return 1;
        }
        //n is even
        int halfPower= optimizedPower(a, n/2);
        int halfPowerSq =halfPower * halfPower;

        //n is odd
        if(n%2 != 0){
            halfPowerSq = a * halfPowerSq;
        }
       
        return halfPowerSq;
    }
    public static void main(String[] args) {
        System.out.println(optimizedPower(2,5));
    }
}


-----------------------Tiling Problem

public class Basics{

    public static int tilingProblem(int n){  //2*n Floor Size

        //Basecase
        if(n==0 || n==1){
            return 1;//ways=1
        }
        //vertical choice
        int fnm1 = tilingProblem(n-1);

        //horizontal choice
        int fnm2 = tilingProblem(n-2);

        int totWays =fnm1 + fnm2;

        return totWays;

    }
    public static void main(String[] args) {
        System.out.println(tilingProblem(4));
    }
}


---------------------------------- remove duplicates in a string

public class Basics{

    public static void duplicateString(String str, int idx, StringBuilder newStr, boolean map[]){

        //basecase
        if(idx==str.length()){
            System.out.println(newStr);
            return;
        }

        char currElement = str.charAt(idx);
        //element already present
        if(map[currElement-'A']== true){
            duplicateString(str, idx+1, newStr, map);
        }
        //element not present
        else{
            map[currElement-'A'] =true;
            duplicateString(str, idx+1, newStr.append(currElement), map);

        }
        
        }
    
    public static void main(String[] args) {
        String str ="NIKITA";
        StringBuilder sb =new StringBuilder("");
        boolean arr[] =new boolean[26];
        duplicateString(str,0,sb,arr);
    }
}


------------------------------------------ Friends Pairing Problem

public class Basics{

    public static int friendsPairing(int n){
        //basecase
        if(n==1 || n==2){
            return n;
        }

        //choice
    //single
        int fnm1 =friendsPairing(n-1);
    //pair
        int fnm2 =friendsPairing(n-2);
        int pairWays =(n-1) * fnm2;

        //totalways
        int totalWays =fnm1 + pairWays;
        return totalWays;
    }
    public static void main(String[] args) {
        System.out.println(friendsPairing(3));
    }
}

or

public class Basics{

    public static int friendsPairing(int n){
        //basecase
        if(n==1 || n==2){
            return n;
        }
        return friendsPairing(n-1) + (n-1) * friendsPairing(n-2);
    }
    public static void main(String[] args) {
        System.out.println(friendsPairing(3));
    }
}


------------------------  Binary Strings Problem

public class Basics{

    public static void printBinaryStrings(int n , int lastPlace, String str){
        //basecase n=0, print empty string
        if(n==0){
            System.out.println(str);
            return;
        }

        printBinaryStrings(n-1,0,str+"0");

        if(lastPlace==0){
            printBinaryStrings(n-1, 1, str+"1");
        }


    }
    public static void main(String[] args) {
        int n=3;
        int lastPlace =0;
        String str ="";
        printBinaryStrings(n,lastPlace,str);
    }
}

--------------------------------------------------------- PRACTICE QUESTIONS -----------------------------------------------------------------------------

1)fOR A GIVEN integer array of size N, YoU HAVE TO FIND ALL THE OCCURENCES (INDICES) OF A GIVEN ELEMENT(KEY)
AND PRINT THEM. USE A RECURSIVE FUNCTION TO SOLVE THIS PROBLEM

Sample input:  arr[] ={3,2,4,5,6,2,7,2,2}, key=2
Sample output: 1 5 7 8

public class Basics{

    public static void printKeyIndex(int arr[] ,int key,int i){
        //Basecase
        if(i==arr.length){
            return ;
        }
        if(arr[i]==key){
            System.out.print(i + " ");
        }
     printKeyIndex(arr, key, i+1);

    }
    public static void main(String[] args) {
        int arr[]= {3,2,4,5,6,2,7,2,2};
        int key =2;
        printKeyIndex(arr,key,0);
    }
}

2) You are given a number (eg -  2019), convert it into a String of english like“two zero one nine”.  
Use a recursive function to solve this problem.
NOTE-The digits of the number will only be in the range0-9 and the lastdigit of a number cant be 0.

Sample input: 1947
Sample output: "one nine four seven"

public class Basics{

    public static void printDigits(int n){
        String arr[] ={"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};
        if(n==0){
            return;
        }
        int lastdigit =n%10;
        printDigits(n/10);
        System.out.print(arr[lastdigit] + " ");
    }
    public static void main(String[] args) {
        printDigits(1234);

    }
}

3) Write a program to find Length of s String using Recursion.

