                                           Acitivity Selection //O(n)

(when activities are sorted)

import java.util.*;

public class Basics {
    public static void main(String[] args) { // O(n)
        // activity start time
        int start[] = { 1, 3, 0, 5, 8, 5 };
        // activity end time -sorted order already
        int end[] = { 2, 4, 6, 7, 9, 9 };

        // count for maxActivity
        int maxActivity = 0;

        // creating ArrayList to store Activity Index
        ArrayList<Integer> ans = new ArrayList<>();

        // 1st acitivity
        maxActivity = 1;
        ans.add(0);
        int lastEnd = end[0];

        // loop run after 1 activity for selecting activity whose start time >= prev end
        // time
        for (int i = 1; i < end.length; i++) {
            // select activity
            if (start[i] >= lastEnd) { // non overlapping activity
                maxActivity++; // increase count
                ans.add(i); // add activity in the list
                lastEnd = end[i];
            }
        }

        System.out.println("max acitivities = " + maxActivity);

        // print selected activities
        for (int i = 0; i < ans.size(); i++) {
            System.out.print("A" + ans.get(i) + " ");
        }
        System.out.println();
    }
}

Output-
max acitivities = 4
A0 A1 A3 A4 
                                          or(when activities are not sorted)- O(nlogn)

import java.util.*;

public class Basics {
    public static void main(String[] args) { // O(nlogn)

        int start[] = { 1, 3, 0, 5, 8, 5 };
        int end[] = { 2, 4, 6, 7, 9, 9 };

        // sorting-using 2D array
        // creating 2D array
        int activities[][] = new int[start.length][3];// [row][col]
        for (int i = 0; i < start.length; i++) {
            activities[i][0] = i;
            activities[i][1] = start[i];
            activities[i][2] = end[i];
        }
        // sorting 2D array using lamda function
        Arrays.sort(activities, Comparator.comparingDouble(o -> o[2])); // sorting using ending time column

        // end time basis sorted
        int maxActivity = 0;
        ArrayList<Integer> ans = new ArrayList<>();

        // 1st acitivity-we store index in ans(list)
        maxActivity = 1;
        ans.add(activities[0][0]); // 0-index, 1-start, 2-end
        int lastEnd = activities[0][2];
        // other activity
        for (int i = 1; i < end.length; i++) {
            if (activities[i][1] >= lastEnd) {
                maxActivity++;
                ans.add(activities[i][0]);
                lastEnd = activities[i][2];
            }
        }

        System.out.println("max acitivities = " + maxActivity);

        // print selected activities
        for (int i = 0; i < ans.size(); i++) {
            System.out.print("A" + ans.get(i) + " ");
        }
        System.out.println();
    }
}


Output-
max acitivities = 4
A0 A1 A3 A4 
---------------------------------------------------------------------------------------------------------------------------------------------------------
                                                    Fractional Knapsack 



import java.util.*;

public class Basics {
    public static void main(String[] args) {
        int val[] = { 60, 100, 120 };
        int weight[] = { 10, 20, 30 };
        int W = 50;
        // sort ratio using 2D array

        // creating 2D array-double type because decimal values imp
        double ratio[][] = new double[val.length][2];
        // store original index and ration in 2d array oth col -idx; 1st col-ratio
        for (int i = 0; i < val.length; i++) {
            ratio[i][0] = i;
            ratio[i][1] = val[i] / (double) weight[i];
        }

        // sort 2darray-ascending order
        Arrays.sort(ratio, Comparator.comparingDouble(o -> o[1]));

        int capacity = W;
        int finalVal = 0;
        // we want ratio in descending order
        for (int i = ratio.length - 1; i >= 0; i--) {
            int idx = (int) ratio[i][0]; // konse index ka highest ratio hai
            if (capacity >= weight[idx]) { // include full item
                finalVal += val[idx]; // full val add
                capacity -= weight[idx]; // full weight remove from capacity
            } else {// include fractional item
                finalVal += ratio[i][1] * capacity; //fractional value  
                capacity = 0;
                break;

            }
        }
        System.out.println("final Value = " + finalVal);
    }
}

Output:-final Value = 240
---------------------------------------------------------------------------------------------------------------------------------------------------------
                            Min Absolute Difference Pairs -O(nlogn)

import java.util.*;

public class Basics {
    public static void main(String[] args) {
        int A[] = { 1, 2, 3 };
        int B[] = { 2, 1, 3 };
        // sort both arrays
        Arrays.sort(A);
        Arrays.sort(B);

        int minDiff = 0;

        //add absolute diff in minDiff
        for (int i = 0; i < A.length; i++) {
            minDiff += Math.abs(A[i] - B[i]);
        }
        System.out.println("min absolute diff of pairs = " + minDiff);
    }
}


---------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------
