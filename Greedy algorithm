                                           Acitivity Selection //O(n)

(when activities are sorted)

import java.util.*;

public class Basics {
    public static void main(String[] args) { // O(n)
        // activity start time
        int start[] = { 1, 3, 0, 5, 8, 5 };
        // activity end time -sorted order already
        int end[] = { 2, 4, 6, 7, 9, 9 };

        // count for maxActivity
        int maxActivity = 0;

        // creating ArrayList to store Activity Index
        ArrayList<Integer> ans = new ArrayList<>();

        // 1st acitivity
        maxActivity = 1;
        ans.add(0);
        int lastEnd = end[0];

        // loop run after 1 activity for selecting activity whose start time >= prev end
        // time
        for (int i = 1; i < end.length; i++) {
            // select activity
            if (start[i] >= lastEnd) { // non overlapping activity
                maxActivity++; // increase count
                ans.add(i); // add activity in the list
                lastEnd = end[i];
            }
        }

        System.out.println("max acitivities = " + maxActivity);

        // print selected activities
        for (int i = 0; i < ans.size(); i++) {
            System.out.print("A" + ans.get(i) + " ");
        }
        System.out.println();
    }
}

                                          or(when activities are not sorted)- O(nlogn)

import java.util.*;

public class Basics {
    public static void main(String[] args) { // O(nlogn)

        int start[] = { 1, 3, 0, 5, 8, 5 };
        int end[] = { 2, 4, 6, 7, 9, 9 };

        // sorting-using 2D array
        // creating 2D array
        int activities[][] = new int[start.length][3];// [row][col]
        for (int i = 0; i < start.length; i++) {
            activities[i][0] = i;
            activities[i][1] = start[i];
            activities[i][2] = end[i];
        }
        // sorting 2D array using lamda function
        Arrays.sort(activities, Comparator.comparingDouble(o -> o[2])); // sorting using ending time column

        // end time basis sorted
        int maxActivity = 0;
        ArrayList<Integer> ans = new ArrayList<>();

        // 1st acitivity-we store index in ans(list)
        maxActivity = 1;
        ans.add(activities[0][0]); // 0-index, 1-start, 2-end
        int lastEnd = activities[0][2];
        // other activity
        for (int i = 1; i < end.length; i++) {
            if (activities[i][1] >= lastEnd) {
                maxActivity++;
                ans.add(activities[i][0]);
                lastEnd = activities[i][2];
            }
        }

        System.out.println("max acitivities = " + maxActivity);

        // print selected activities
        for (int i = 0; i < ans.size(); i++) {
            System.out.print("A" + ans.get(i) + " ");
        }
        System.out.println();
    }
}
