1) Check number is even or odd

import java.util.*;
public class Basics{

    public static void oddOrEven(int n){
        int bitMask =1;
        if((n & bitMask) == 0){
            //evennumber
            System.out.println("Even number");
        }
        else{
            System.out.println("odd numner");
        }
    }
    public static void main(String[] args) {
        oddOrEven(3);
        oddOrEven(11);
        oddOrEven(14);
    }
}


2) get ith bit

import java.util.*;
public class Basics{

    public static void getIthBit(int n ,int i){
        int bitmask= 1<<i;
        if((n & bitmask) == 0){
            System.out.println("ith bit is 0");
        }
        else{
            System.out.println("ith bit is 1");
        }
    }
    public static void main(String[] args) {
        getIthBit(8,1);
    }
}

3) set ith bit

import java.util.*;
public class Basics{

    public static void setIthBit(int n ,int i){
        int bitmask= 1<<i;;
        System.out.println((n|1<<i));
    }
    public static void main(String[] args) {
        setIthBit(10,2);
    }
}


4) clear ith bit

import java.util.*;
public class Basics{

    public static void clearIthBit(int n ,int i){
        int bitMask =~(1<<i);
        System.out.println((n & bitMask));
    }
    public static void main(String[] args) {
        clearIthBit(10,1);
    }
}

5) Update ith Bit

import java.util.*;
public class Basics{

    public static int setIthBit(int n, int i){
        //makes the ith bit =1
        int bitmask =1<<i;
       return (n | bitmask);
    }

    public static int clearIthBit(int n ,int i){
        //makes the ith bit =0
        int bitMask =~(1<<i);
       return(n & bitMask);
    }

    public static int updateIthBit(int n, int i, int newBit){
        if(newBit == 0){
            return clearIthBit(n, i);
        }
        else{
            return setIthBit(n, i);
        }

    }
    public static void main(String[] args) {
        Scanner sc =new Scanner(System.in);
        int n= sc.nextInt();
        int i=sc.nextInt();
        int newBit = 1; //0
        System.out.println(updateIthBit(n, i, newBit));
    }
}


******************* Another approach

import java.util.*;
public class Basics{


    public static int clearIthBit(int n ,int i){
        //makes the ith bit =0
        int bitMask =~(1<<i);
       return(n & bitMask);
    }

    public static int updateIthBit(int n, int i, int newBit){
       n =clearIthBit(n, i);
       int BitMask =newBit<<i;
       return n | BitMask;

    }
    public static void main(String[] args) {
        Scanner sc =new Scanner(System.in);
        int n= sc.nextInt();
        int i=sc.nextInt();
        int newBit = 1; //0
        System.out.println(updateIthBit(n, i, newBit));
    }
}


6) Clear last i bits

import java.util.*;
public class Basics{

    public static int clearIthBits(int n, int i){
        int bitmask = (-1)<<i;
        return n & bitmask ;
    }
    public static void main(String[] args) {
        int n= 15;
        int i=2;
        System.out.println(clearIthBits(n,i));
    }
}

7)Clear Range Of Bits

import java.util.*;
public class Basics{

    public static int clearBitsinRange(int n, int i , int j){
        int a =(~0)<<j+1;
        int b= (1<<i)-1;
        int bitMask = a|b ;
        return n & bitMask;
    }
    public static void main(String[] args) {
        int n= 10;
        int i=2;
        int j=4;
        System.out.println(clearBitsinRange(n,i,j));
    }
}


8) Check if a number is a power of 2 or not

import java.util.*;
public class Basics{

    public static boolean isPowerOfTwo(int n){
        return (n&(n-1))==0;
    }
       
    public static void main(String[] args) {
        int n= 15;
        System.out.println(isPowerOfTwo(n));
    }
}

9)Count Set Bits in a Number

import java.util.*;
public class Basics{

    public static int countSetBits(int n){
        int count =0;
        while(n>0){//n!=0
            if((n&1) !=0){ //checking LSB
                count++;
            }
            n=n>>1; //right shift by 1 and assign in n
        }
        return count;
    }
       
    public static void main(String[] args) {
        int n= 16;
        System.out.println(countSetBits(n));
    }
}


10) Fast Exponentiation

import java.util.*;
public class Basics{

    public static int fastExpo(int a, int n ){   //a power n
        int ans =1;
        
        while(n>0) {        
            if((n&1)!=0)//analyze n, right shift n by 1,checking LSB
            {
                //update ans
                ans =ans *a;
            }
            //update a and right shift n by 1
            a =a*a;
            n =n>>1;
        }
        return ans;
    }
       
    public static void main(String[] args) {
        System.out.println(fastExpo(5,3));
    }
}


Practice question:

1)What is the value of x^x for any value of x


xor gives 0 when bits are same. if we compare the same number to itself, the bits will always be the same, so the 
answer of x^x will always be 0


2) Swap two numbers without using any third variable

public class Basics{
    public static void main(String[] args) {
        int x =3;
        int y =4;
        System.out.println("before swap: x = " + x + "and y =" + y);

        //swap using xor
        x= x ^ y;
        y= x^ y;
        x= x^y;

        System.out.println("after swap: x = " + x + "and y =" + y);

    }
}


3)Add 1 to an integer using bit ,anipulation (try using bitwise NOT operator)

public class Basics{
    public static void main(String[] args) {
        int x =6;
        System.out.println(x + "+" + 1 + " = "+ -~x);
        int y =-4;
        System.out.println(y + "+" + 1 + " = "+ -~y);
        int z =0;
        System.out.println(z + "+" + 1 + " = "+ -~z);
    }
}
