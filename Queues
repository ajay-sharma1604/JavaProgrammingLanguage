                                                                                  Queues using array
public class QueueB {
    static class Queue {
        static int arr[];
        static int size;
        static int rear;

        // constructor
        Queue(int n) { // n-arraysize
            arr = new int[n];
            size = n;
            rear = -1;
        }

        public static boolean isEmpty() {
            return rear == -1;
        }

        // add
        public static void add(int data) {
            // check queue -full
            if (rear == size - 1) { // rear reached last index
                System.out.println("queue is full");
                return;
            }

            rear = rear + 1; // add data
            arr[rear] = data;// initialize with data

        }

        // remove
        public static int remove() { // remove and return
            if (isEmpty()) {
                System.out.println("empty queue");
                return -1;
            }

            int front = arr[0];
            for (int i = 0; i < rear; i++) {
                arr[i] = arr[i + 1];
            }
            rear = rear - 1;
            return front;
        }

        // peek
        public static int peek() {
            if (isEmpty()) {
                System.out.println("empty queue");
                return -1;
            }
            return arr[0]; // front
        }
    }

    public static void main(String[] args) {
        Queue q = new Queue(5); // 5-arraysize
        q.add(1);
        q.add(2);
        q.add(3);
        while (!q.isEmpty()) {
            System.out.println(q.peek()); // FIFO
            q.remove();
        }
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                          Cicular Queues using Arrays


public class QueueB {
    static class Queue {
        static int arr[];
        static int size;
        static int rear;
        static int front;

        // constructor
        Queue(int n) { // n-arraysize
            arr = new int[n];
            size = n;
            rear = -1;
            front = -1;
        }

        public static boolean isEmpty() {
            return rear == -1 && front == -1;
        }

        public static boolean isFull() {
            return (rear + 1) % size == front;
        }

        // add
        public static void add(int data) {
            // check queue -full
            if (isFull()) {
                System.out.println("queue is full");
                return;
            }
            // add1st element -update front
            if (front == -1) {
                front = 0;
            }
            rear = (rear + 1) % size; // add data
            arr[rear] = data;// initialize with data
        }

        // remove
        public static int remove() { // remove and return
            if (isEmpty()) {
                System.out.println("empty queue");
                return -1;
            }

            int result = arr[front];

            // special case-delete last element
            if (rear == front) {
                rear = front = -1;
            } else {
                front = (front + 1) % size;
            }
            return result;
        }

        // peek
        public static int peek() {
            if (isEmpty()) {
                System.out.println("empty queue");
                return -1;
            }
            return arr[front]; // front
        }
    }

    public static void main(String[] args) {
        Queue q = new Queue(5); // 5-arraysize
        q.add(1);
        q.add(2);
        q.add(3);
        System.out.println(q.remove());
        q.add(4);
        System.out.println(q.remove());
        q.add(5);

        while (!q.isEmpty()) {
            System.out.println(q.peek()); // FIFO
            q.remove();
        }
    }
}

Output:-
1
2
3
4
5

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                      Queue using Linked List

public class QueueB {

    static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    static class Queue {
        static Node head = null;
        static Node tail = null;

        public static boolean isEmpty() {
            return head == null && tail == null;
        }

        // add
        public static void add(int data) {
            // create new node
            Node newNode = new Node(data);
            // empty list
            if (head == null) {
                head = tail = newNode;
                return;
            }
            tail.next = newNode;
            tail = newNode;
        }

        // remove
        public static int remove() { // remove and return
            if (isEmpty()) {
                System.out.println("empty queue");
                return -1;
            }
            int front = head.data;
            // single element
            if (tail == head) {
                tail = head = null;
            } else {
                head = head.next;
            }
            return front;
        }

        // peek
        public static int peek() {
            if (isEmpty()) {
                System.out.println("empty queue");
                return -1;
            }
            return head.data; // front
        }
    }

    public static void main(String[] args) {
        Queue q = new Queue(); // 3-arraysize
        q.add(1);
        q.add(2);
        q.add(3);

        while (!q.isEmpty()) {
            System.out.println(q.peek()); // FIFO
            q.remove();
        }
    }
}

Output:-
1
2
3

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                          Queue using Java Collection Framework

import java.util.*;

public class QueueB {

    public static void main(String[] args) {
        Queue<Integer> q = new ArrayDeque<>();
        // Queue<Integer> q = new LinkedList<>();
        q.add(1);
        q.add(2);
        q.add(3);

        while (!q.isEmpty()) {
            System.out.println(q.peek()); // FIFO
            q.remove();
        }
    }
}

//  Generic error- below code remove this error
//Ensure you are importing the correct Queue class from java.util and not using any custom Queue class that might not be generic.

In the context of Java programming, generics allow you to create classes, interfaces, and methods that operate with unspecified data types. 
This provides you with the ability to define classes and methods that are capable of working with any data type, rather than being tied to a specific type.
Generics provide type safety, allowing you to catch errors at compile time rather than at runtime, and they also enable you to write more reusable and flexible code.

import java.util.Queue;
import java.util.LinkedList;
import java.util.ArrayDeque;

public class QueueB {

    public static void main(String[] args) {
        Queue<Integer> q = new ArrayDeque<>();
        // Queue<Integer> q = new LinkedList<>();
        q.add(1);
        q.add(2);
        q.add(3);

        while (!q.isEmpty()) {
            System.out.println(q.peek()); // FIFO
            q.remove();
        }
    }
}



-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                              Queue using Two Stacks
import java.util.*;
import java.util.Queue;
import java.util.Stack;

public class QueueB {
    static class Queue {
        // making 2 stacks
        static Stack<Integer> s1 = new Stack<>();
        static Stack<Integer> s2 = new Stack<>();

        public static boolean isEmpty() {
            return s1.isEmpty();
        }

        // add- O(1)
        public static void add(int data) {
            while (!s1.isEmpty()) {
                s2.push(s1.pop());
            }
            s1.push(data);
            while (!s2.isEmpty()) {
                s1.push(s2.pop());
            }
        }

        // remove -O(1)
        public static int remove() {
            if (isEmpty()) {
                System.out.println("queue empty");
                return -1;
            }
            return s1.pop();
        }

        // peek -O(1)
        public static int peek() {
            if (isEmpty()) {
                System.out.println("queue empty");
                return -1;
            }
            return s1.peek();
        }

    }

    public static void main(String[] args) {
        Queue q = new Queue();
        q.add(1);
        q.add(2);
        q.add(3);
        while (!q.isEmpty()) {
            System.out.println(q.peek());
            q.remove();
        }
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                Stack using 2 Queue
import java.util.*;
import java.util.LinkedList;
import java.util.Queue;

public class QueueB {

    // creating stack class
    static class Stack {
        // create 2 queue
        static Queue<Integer> q1 = new LinkedList<>();
        static Queue<Integer> q2 = new LinkedList<>();

        // implement isEmpty()
        public static boolean isEmpty() {
            return q1.isEmpty() && q2.isEmpty();
        }

        // add function-push in empty queue -O(1)
        public static void push(int data) {
            if (!q1.isEmpty()) {
                q1.add(data);
            } else {
                q2.add(data);
            }
        }

        // pop function -O(n)
        public static int pop() {
            if (isEmpty()) {
                System.out.println("empty stack");
                return -1;
            }
            int top = -1;

            // case1- elements stored in q1
            if (!q1.isEmpty()) {
                while (!q1.isEmpty()) {
                    top = q1.remove();
                    if (q1.isEmpty()) {
                        break;
                    }
                    q2.add(top);
                }
            }
            // case2 -elements stored in q2
            else {
                while (!q2.isEmpty()) {
                    top = q2.remove();
                    if (q2.isEmpty()) {
                        break;
                    }
                    q1.add(top);
                }
            }

            return top;
        }

        // peek function -O(n)
        public static int peek() {
            if (isEmpty()) {
                System.out.println("queue empty");
                return -1;
            }
            int top = -1;

            // case1- elements stored in q1
            if (!q1.isEmpty()) {
                while (!q1.isEmpty()) {
                    top = q1.remove();
                    q2.add(top);
                }
            }
            // case2 -elements stored in q2
            else {
                while (!q2.isEmpty()) {
                    top = q2.remove();
                    q1.add(top);
                }
            }

            return top;
        }

    }

    public static void main(String[] args) {
        Stack s = new Stack();
        s.push(1);
        s.push(2);
        s.push(3);
        while (!s.isEmpty()) {
            System.out.println(s.peek());
            s.pop();
        }
    }

}

Output:-
3
2
1


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                      First non-repeating letter in a Stream of Characters

import java.util.*;
import java.util.LinkedList;
import java.util.Queue;

public class Basics {
    public static void printfirstNonRepeating(String str) {
        // create freq arr and queue
        int freq[] = new int[26];
        Queue<Character> q = new LinkedList<>();

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            q.add(ch); // store char in queue
            freq[ch - 'a']++; // increase freq of char

            // until queue gets empty and freq>1(non repeating char)-remove
            while (!q.isEmpty() && freq[q.peek() - 'a'] > 1) {
                q.remove();
            }
            // above cond false- case1:queue empty and case2:freq=1
            // queue empty
            if (q.isEmpty()) {
                System.out.print(-1 + " ");
            }
            // found 1st non repeating element in queue first
            else {
                System.out.print(q.peek() + " ");
            }
        }
        System.out.println();
    }

    public static void main(String[] args) {
        String str = "aabccxb";
        printfirstNonRepeating(str);
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                    Interleave 2 Halves of a Queue(even length)

import java.util.*;
import java.util.LinkedList;
import java.util.Queue;

public class Basics {

    public static void interLeave(Queue<Integer> q) {
        // create new queue for storing first half
        Queue<Integer> firstHalf = new LinkedList<>();
        // calculate size of original queue
        int size = q.size();

        for (int i = 0; i < size / 2; i++) {
            // i<q.size()/2 is wrong changing value q.size()
            firstHalf.add(q.remove());
        }

        while (!firstHalf.isEmpty()) {
            q.add(firstHalf.remove());
            q.add(q.remove());
        }
    }

    public static void main(String[] args) {
        Queue<Integer> q = new LinkedList<>();
        q.add(1);
        q.add(2);
        q.add(3);
        q.add(4);
        q.add(5);
        q.add(6);
        q.add(7);
        q.add(8);
        q.add(9);
        q.add(10);

        interLeave(q);
        while (!q.isEmpty()) {
            System.out.print(q.remove() + " ");
        }
        System.out.println();

    }
}

Output:-
1 6 2 7 3 8 4 9 5 10

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                Queue Reversal

import java.util.*;
import java.util.LinkedList;
import java.util.Queue;

public class Basics {

    public static void reverse(Queue<Integer> q) {
        Stack<Integer> s = new Stack<>();

        while (!q.isEmpty()) {
            s.push(q.remove());
        }

        while (!s.isEmpty()) {
            q.add(s.pop());
        }
    }

    public static void main(String[] args) {
        Queue<Integer> q = new LinkedList<>();
        q.add(1);
        q.add(2);
        q.add(3);
        q.add(4);
        q.add(5);

        reverse(q);

        // print queue
        while (!q.isEmpty()) {
            System.out.print(q.remove() + " ");
        }
        System.out.println();
    }
}

Output:-
5 4 3 2 1 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                        Deque (Double Ended Queue)

import java.util.*;
import java.util.LinkedList;
import java.util.Queue;

public class Basics {
    public static void main(String[] args) {
        // creating Deque
        Deque<Integer> deque = new LinkedList<>();

        deque.addFirst(1);
        deque.addFirst(2);
        System.out.println(deque); // 2,1
        deque.removeFirst();
        System.out.println(deque);// 1
        deque.addLast(3);
        deque.addLast(4);
        System.out.println(deque);// 1,3,4
        deque.removeLast();
        System.out.println(deque);// 1,3
        System.out.println("first el = " + deque.getFirst()); // 1
        System.out.println("last el = " + deque.getLast());// 3
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                      Implement Stack using Deque

import java.util.*;
import java.util.LinkedList;
import java.util.Queue;

public class Basics {

    static class Stack {
        Deque<Integer> deque = new LinkedList<>();

        // push
        public void push(int data) {
            deque.addLast(data);
        }

        // pop
        public int pop() {
            return deque.removeLast();
        }

        // peek
        public int peek() {
            return deque.getLast();
        }
    }

    public static void main(String[] args) {
        Stack s = new Stack();
        s.push(1);
        s.push(2);
        s.push(3);
        System.out.println("peek =" + s.peek());
        System.out.println(s.pop());
        System.out.println(s.pop());
        System.out.println(s.pop());
    }
}


Output:-
peek =3
3
2
1

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                            Implement Queue using Deque

import java.util.*;
import java.util.LinkedList;
import java.util.Queue;

public class Basics {

    static class Queue {
        Deque<Integer> deque = new LinkedList<>();

        // add
        public void add(int data) {
            deque.addLast(data);
        }

        // remove
        public int remove() {
            return deque.removeFirst();
        }

        // peek
        public int peek() {
            return deque.getFirst();
        }
    }

    public static void main(String[] args) {
        Queue q = new Queue();
        q.add(1);
        q.add(2);
        q.add(3);
        System.out.println("peek =" + q.peek());
        System.out.println(q.remove());
        System.out.println(q.remove());
        System.out.println(q.remove());

    }
}

Output:-
peek =1
1
2
3

