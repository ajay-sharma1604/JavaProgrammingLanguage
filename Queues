                                                                                  Queues using array
public class QueueB {
    static class Queue {
        static int arr[];
        static int size;
        static int rear;

        // constructor
        Queue(int n) { // n-arraysize
            arr = new int[n];
            size = n;
            rear = -1;
        }

        public static boolean isEmpty() {
            return rear == -1;
        }

        // add
        public static void add(int data) {
            // check queue -full
            if (rear == size - 1) { // rear reached last index
                System.out.println("queue is full");
                return;
            }

            rear = rear + 1; // add data
            arr[rear] = data;// initialize with data

        }

        // remove
        public static int remove() { // remove and return
            if (isEmpty()) {
                System.out.println("empty queue");
                return -1;
            }

            int front = arr[0];
            for (int i = 0; i < rear; i++) {
                arr[i] = arr[i + 1];
            }
            rear = rear - 1;
            return front;
        }

        // peek
        public static int peek() {
            if (isEmpty()) {
                System.out.println("empty queue");
                return -1;
            }
            return arr[0]; // front
        }
    }

    public static void main(String[] args) {
        Queue q = new Queue(5); // 5-arraysize
        q.add(1);
        q.add(2);
        q.add(3);
        while (!q.isEmpty()) {
            System.out.println(q.peek()); // FIFO
            q.remove();
        }
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                          Cicular Queues using Arrays


public class QueueB {
    static class Queue {
        static int arr[];
        static int size;
        static int rear;
        static int front;

        // constructor
        Queue(int n) { // n-arraysize
            arr = new int[n];
            size = n;
            rear = -1;
            front = -1;
        }

        public static boolean isEmpty() {
            return rear == -1 && front == -1;
        }

        public static boolean isFull() {
            return (rear + 1) % size == front;
        }

        // add
        public static void add(int data) {
            // check queue -full
            if (isFull()) {
                System.out.println("queue is full");
                return;
            }
            // add1st element -update front
            if (front == -1) {
                front = 0;
            }
            rear = (rear + 1) % size; // add data
            arr[rear] = data;// initialize with data
        }

        // remove
        public static int remove() { // remove and return
            if (isEmpty()) {
                System.out.println("empty queue");
                return -1;
            }

            int result = arr[front];

            // special case-delete last element
            if (rear == front) {
                rear = front = -1;
            } else {
                front = (front + 1) % size;
            }
            return result;
        }

        // peek
        public static int peek() {
            if (isEmpty()) {
                System.out.println("empty queue");
                return -1;
            }
            return arr[front]; // front
        }
    }

    public static void main(String[] args) {
        Queue q = new Queue(5); // 5-arraysize
        q.add(1);
        q.add(2);
        q.add(3);
        System.out.println(q.remove());
        q.add(4);
        System.out.println(q.remove());
        q.add(5);

        while (!q.isEmpty()) {
            System.out.println(q.peek()); // FIFO
            q.remove();
        }
    }
}

Output:-
1
2
3
4
5

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                      Queue using Linked List

public class QueueB {

    static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    static class Queue {
        static Node head = null;
        static Node tail = null;

        public static boolean isEmpty() {
            return head == null && tail == null;
        }

        // add
        public static void add(int data) {
            // create new node
            Node newNode = new Node(data);
            // empty list
            if (head == null) {
                head = tail = newNode;
                return;
            }
            tail.next = newNode;
            tail = newNode;
        }

        // remove
        public static int remove() { // remove and return
            if (isEmpty()) {
                System.out.println("empty queue");
                return -1;
            }
            int front = head.data;
            // single element
            if (tail == head) {
                tail = head = null;
            } else {
                head = head.next;
            }
            return front;
        }

        // peek
        public static int peek() {
            if (isEmpty()) {
                System.out.println("empty queue");
                return -1;
            }
            return head.data; // front
        }
    }

    public static void main(String[] args) {
        Queue q = new Queue(); // 3-arraysize
        q.add(1);
        q.add(2);
        q.add(3);

        while (!q.isEmpty()) {
            System.out.println(q.peek()); // FIFO
            q.remove();
        }
    }
}

Output:-
1
2
3

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                          Queue using Java Collection Framework

import java.util.*;

public class QueueB {

    public static void main(String[] args) {
        Queue<Integer> q = new ArrayDeque<>();
        // Queue<Integer> q = new LinkedList<>();
        q.add(1);
        q.add(2);
        q.add(3);

        while (!q.isEmpty()) {
            System.out.println(q.peek()); // FIFO
            q.remove();
        }
    }
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


