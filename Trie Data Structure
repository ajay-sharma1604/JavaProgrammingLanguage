                                                    Basics of Trie

public class Basics {

    static class Node {
        Node children[] = new Node[26];
        boolean eow = false;

        Node() {
            children[i] = null;
        }
    }

    public static Node root = new Node(); // empty by default

    public static void main(String[] args) {
        String words[] = { "the", "a", "there", "their", "any", "thee" };
    }
}
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                        Insert in Trie - O(L)

public class Basics {

    static class Node {
        Node children[] = new Node[26];
        boolean eow = false;

        Node() {
            for (int i = 0; i < 26; i++) {
                children[i] = null;
            }
        }
    }

    public static Node root = new Node(); // empty by default

    public static void insert(String word) {    //O(L)
        Node curr = root;
        // level wise traverse =word length
        for (int level = 0; level < word.length(); level++) {
            int idx = word.charAt(level) - 'a'; // indx need to search in children array
            if (curr.children[idx] == null) {// new node create
                curr.children[idx] = new Node();
            }
            curr = curr.children[idx]; // next level-child node becomes curr and ab iske children wale level par search
        }

        curr.eow = true; // when curr becomes last node
    }

    public static void main(String[] args) {
        String words[] = { "the", "a", "there", "their", "any", "thee" };
        for (int i = 0; i < words.length; i++) {
            insert(words[i]);
        }
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                    Search in Trie -O(L)

public class Basics {

    static class Node {
        Node children[] = new Node[26];
        boolean eow = false;

        Node() {
            for (int i = 0; i < 26; i++) {
                children[i] = null;
            }
        }
    }

    public static Node root = new Node(); // empty by default

    // -------------------------Insert------------------------
    public static void insert(String word) { // O(L)
        Node curr = root;
        // level wise traverse =word length
        for (int level = 0; level < word.length(); level++) {
            int idx = word.charAt(level) - 'a'; // indx need to search in children array
            if (curr.children[idx] == null) {// new node create
                curr.children[idx] = new Node();
            }
            curr = curr.children[idx]; // next level-child node becomes curr and ab iske children wale level par search
        }

        curr.eow = true; // when curr becomes last node
    }

    // -----------------------------Search-----------------------

    public static boolean search(String key) {
        Node curr = root;
        for (int level = 0; level < key.length(); level++) {
            int idx = key.charAt(level) - 'a';
            if (curr.children[idx] == null) {
                return false; // key doesnt exist in trie
            }
            curr = curr.children[idx];// ifkey exist update curr
        }
        return curr.eow == true;
    }

    public static void main(String[] args) {
        String words[] = { "the", "a", "there", "their", "any", "thee" };
        for (int i = 0; i < words.length; i++) {
            insert(words[i]);
        }

        System.out.println(search("thee"));
        System.out.println(search("any"));
        System.out.println(search("an"));
        System.out.println(search("thor"));
    }
}

Output:-
true
true
false
false


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                              Word Break Problem
public class Basics {

    static class Node {
        Node children[] = new Node[26];
        boolean eow = false;

        public Node() {
            for (int i = 0; i < 26; i++) {
                children[i] = null;
            }
        }
    }

    public static Node root = new Node();

    public static void insert(String word) {
        Node curr = root;
        for (int level = 0; level < word.length(); level++) {
            int idx = word.charAt(level) - 'a';
            if (curr.children[idx] == null) {
                curr.children[idx] = new Node();
            }
            curr = curr.children[idx];
        }
        curr.eow = true;
    }

    public static boolean search(String key) {
        Node curr = root;
        for (int level = 0; level < key.length(); level++) {
            int idx = key.charAt(level) - 'a';
            if (curr.children[idx] == null) {
                return false;
            }
            curr = curr.children[idx];
        }
        return curr.eow == true;
    }

    public static boolean wordBreak(String key) { // O(L)

        if (key.length() == 0) { // 2nd part by default return true; search only for 1st part
            return true;
        }
        for (int i = 1; i <= key.length(); i++) {
            // substring(0,i)= if i=0; then invalid condition ,last index is inot included
            // so -1 will be invalid one before 0 is -1

            // 1st part true return then only recursive function call
            if ((search(key.substring(0, i))) && wordBreak(key.substring(i))) {
                return true;
            }
        }
        return false;
    }

    public static void main(String[] args) {
        String arr[] = { "i", "like", "sam", "samsung", "mobile", "ice" };
        String key = "ilikesamsung";

        // Inserting every string in trie
        for (int i = 0; i < arr.length; i++) {
            insert(arr[i]);
        }

        System.out.println(wordBreak(key));
    }
}

Output:-True

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                              Prefix Problem


public class Basics {

    static class Node {
        Node[] children = new Node[26];
        boolean eow = false;
        int freq;

        public Node() {
            for (int i = 0; i < children.length; i++) {
                children[i] = null;
            }
            freq = 1; // by default: for new node
        }
    }

    public static Node root = new Node();

    public static void insert(String word) {
        Node curr = root;
        for (int i = 0; i < word.length(); i++) {
            int idx = word.charAt(i) - 'a';
            if (curr.children[idx] == null) {
                curr.children[idx] = new Node();
            } else {
                curr.children[idx].freq++;
            }

            curr = curr.children[idx];
        }
        curr.eow = true;
    }

    public static void findPrefix(Node root, String ans) { // O(L) -levels in my tries =longest word

        if (root == null) {
            return;
        }

        if (root.freq == 1) {
            System.out.println(ans);
            return;
        }
        // traverse children array for each root
        for (int i = 0; i < root.children.length; i++) {
            if (root.children[i] != null) {
                findPrefix(root.children[i], ans + (char) (i + 'a'));
            }
        }

    }

    public static void main(String[] args) {
        String arr[] = { "zebra", "dog", "duck", "dove" };

        // inserting
        for (int i = 0; i < arr.length; i++) {
            insert(arr[i]);
        }

        root.freq = -1; // by default 1 for new node
        findPrefix(root, "");

        // output- alphabetical order by default children node stores nodes in
        // alphabetical order
    }
}

Output:-
dog
dov
du
z

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                              startsWithProblem


public class Basics {

    static class Node {
        Node children[] = new Node[26];
        boolean eow;

        public Node() {
            for (int i = 0; i < 26; i++) {
                children[i] = null;
            }
        }
    }

    public static Node root = new Node();

    public static void insert(String word) {
        int level = 0;
        int len = word.length();
        int idx = 0;
        Node curr = root;

        for (; level < len; level++) {
            idx = word.charAt(level) - 'a';
            if (curr.children[idx] == null) {
                curr.children[idx] = new Node();
            }
            curr = curr.children[idx];
        }
        curr.eow = true;
    }

    public static boolean startsWith(String prefix) { // O(L)

        Node curr = root;

        for (int i = 0; i < prefix.length(); i++) {
            int idx = prefix.charAt(i) - 'a';
            if (curr.children[idx] == null) {
                return false;
            }
            curr = curr.children[idx];
        }
        return true;
    }

    public static void main(String[] args) {
        String words[] = { "apple", "app", "mango", "man", "woman" };
        String prefix1 = "app"; // true
        String prefix2 = "moon";// false

        // create trie ds
        for (int i = 0; i < words.length; i++) {
            insert(words[i]);
        }
        System.out.println(startsWith(prefix1));
        System.out.println(startsWith(prefix2));
    }
}


Output:-
true
false

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


                                                                        Unique Substrings

public class Basics {

    static class Node {
        Node children[] = new Node[26];
        boolean eow;

        public Node() {
            for (int i = 0; i < 26; i++) {
                children[i] = null;
            }
        }
    }

    public static Node root = new Node();

    public static void insert(String word) {
        int level = 0;
        int len = word.length();
        int idx = 0;
        Node curr = root;

        for (; level < len; level++) {
            idx = word.charAt(level) - 'a';
            if (curr.children[idx] == null) {
                curr.children[idx] = new Node();
            }
            curr = curr.children[idx];
        }
        curr.eow = true;
    }

    public static boolean search(String key) {
        int level = 0;
        int len = key.length();
        int idx = 0;
        Node curr = root;

        for (; level < len; level++) {
            idx = key.charAt(level) - 'a';
            if (curr.children[idx] == null) {
                return false;
            }
            curr = curr.children[idx];
        }
        return curr.eow == true;
    }

    public static int countNodes(Node root) {
        if (root == null) {
            return 0;
        }

        int count = 0;
        for (int i = 0; i < 26; i++) {
            if (root.children[i] != null) {
                count += countNodes(root.children[i]);
            }
        }
        return count + 1; // children node are counted but +1 for self node
    }

    public static void main(String[] args) {
        String str = "ababa"; // ans= 10

        // suffix ->insert in trie
        for (int i = 0; i < str.length(); i++) {
            String suffix = str.substring(i);
            insert(suffix);
        }

        System.out.println(countNodes(root));
    }
}
Output:- 10

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                                  Longest Word with all Prefixes


public class Basics {

    static class Node {
        Node children[] = new Node[26];
        boolean eow;

        public Node() {
            for (int i = 0; i < 26; i++) {
                children[i] = null;
            }
        }
    }

    public static Node root = new Node();

    public static void insert(String word) {
        int level = 0;
        int len = word.length();
        int idx = 0;
        Node curr = root;

        for (; level < len; level++) {
            idx = word.charAt(level) - 'a';
            if (curr.children[idx] == null) {
                curr.children[idx] = new Node();
            }
            curr = curr.children[idx];
        }
        curr.eow = true;
    }

    public static boolean search(String key) {
        int level = 0;
        int len = key.length();
        int idx = 0;
        Node curr = root;

        for (; level < len; level++) {
            idx = key.charAt(level) - 'a';
            if (curr.children[idx] == null) {
                return false;
            }
            curr = curr.children[idx];
        }
        return curr.eow == true;
    }

    public static String ans = "";

    public static void longestWord(Node root, StringBuilder temp) {
        if (root == null) {
            return;
        }

       // for (int i = 0; i < 26; i++) {//lexicographically small
            for(int i=25 ;i>=0 ;i--){//Lexicographically big
            if (root.children[i] != null && root.children[i].eow == true) {
                char ch = (char) (i + 'a');
                temp.append(ch);
                if (temp.length() > ans.length()) {
                    ans = temp.toString(); // directly sb value cannot be assigned in string
                }
                longestWord(root.children[i], temp); // recursive call
                temp.deleteCharAt(temp.length() - 1);// backtrack
            }
        }
    }

    public static void main(String[] args) {
        String words[] = { "a", "banana", "app", "appl", "ap", "apply", "apple" };

        for (int i = 0; i < words.length; i++) {
            insert(words[i]);
        }

        longestWord(root, new StringBuilder(""));
        System.out.println(ans);

    }
}

Output:-
apple(lexicographically small)- for(int i=0;i<26;i++)
apply(lexicographicaly big)-for(int i=25;i>=0;i--)
