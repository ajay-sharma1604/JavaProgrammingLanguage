Backtracking array

public class Java {

    public static void changeArr(int arr[], int index, int value) {

        // basecase
        if (index == arr.length) {
            printArr(arr);
            return;
        }
        // recursion
        arr[index] = value;
        changeArr(arr, index + 1, value + 1);
        arr[index] = arr[index] - 2;
    }

    public static void printArr(int arr[]) {
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int arr[] = new int[5];
        changeArr(arr, 0, 1);
        printArr(arr);
    }
}

output:-
1 2 3 4 5 
(-2 on each value)
-1 0 1 2 3 


-----------------------------------------------------------------------------------------------------------------------

Q) FIND SUBSWTA OF A SUVBSTRING
public class Java {

    public static void findSubsets(String str, int index, String ans) {

        // basecase
        if (index == str.length()) {
            if (ans.length() == 0) {
                System.out.println("null");
            } else {
                System.out.println(ans);
            }

            return;
        }

        // Recursion
        // yes choice
        findSubsets(str, index + 1, ans + str.charAt(index));

        // no choice
        findSubsets(str, index + 1, ans);
    }

    public static void main(String[] args) {
        String str = "abc";
        findSubsets(str, 0, "");
    }
}

Output:-
abc
ab
ac
a
bc
b
c
null


--------------------------------------------------------------------------------------------------------------------

ques) Find Permutation of String

public class Java {

    public static void findPermutation(String str, String ans) {

        // basecase
        if (str.length() == 0) {
            System.out.println(ans);
            return;
        }
        // recursion
        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            String Newstr = str.substring(0, i) + str.substring(i + 1);
            findPermutation(Newstr, ans + ch);
        }
    }

    public static void main(String[] args) {
        String str = "abc";
        findPermutation(str, "");
    }
}

output:-
abc
acb
bac
bca
cab
cba

----------------------------------------------------------------------------------------------------------------------------------
quest) N queens

public class Java {

    public static boolean isSafe(char board[][], int row, int col) {
        // vertically up
        for (int i = row - 1; i >= 0; i--) {
            if (board[i][col] == 'Q') {
                return false;
            }
        }
        // dia left up
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }
        // dia right up
        for (int i = row - 1, j = col + 1; i >= 0 && j < board.length; i--, j++) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        return true;
    }

    public static void nQueens(char board[][], int row) {

        // BaseCase
        if (row == board.length) {
            printBoard(board);
            return;
        }

        // N QUEENS IN N ROWS
        // we will go at each column of row and sit queen without thinking about safe
        // and unsafe position of a queen
        // Column loop
        for (int j = 0; j < board.length; j++) {
            if (isSafe(board, row, j)) {
                board[row][j] = 'Q';
                nQueens(board, row + 1); // function call
                // 1 row 1 queen
                board[row][j] = '.'; // backtracking step-always comes after function call
            }

        }

    }

    public static void printBoard(char board[][]) {
        System.out.println("----------- chess board -----------");
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        int n = 4;

        // creating board
        char board[][] = new char[n][n];

        // intitalizing board- empty board
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = '.';
            }
        }

        nQueens(board, 0);
        // 0 implies that started putting from 1st row
    }
}
-----------------------------------------------count ways

public class Java {

    public static boolean isSafe(char board[][], int row, int col) {
        // vertically up
        for (int i = row - 1; i >= 0; i--) {
            if (board[i][col] == 'Q') {
                return false;
            }
        }
        // dia left up
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }
        // dia right up
        for (int i = row - 1, j = col + 1; i >= 0 && j < board.length; i--, j++) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        return true;
    }

    public static void nQueens(char board[][], int row) {

        // BaseCase
        if (row == board.length) {
            // printBoard(board);
            count += 1;
            return;
        }

        // N QUEENS IN N ROWS
        // we will go at each column of row and sit queen without thinking about safe
        // and unsafe position of a queen
        // Column loop
        for (int j = 0; j < board.length; j++) {
            if (isSafe(board, row, j)) {
                board[row][j] = 'Q';
                nQueens(board, row + 1); // function call
                // 1 row 1 queen
                board[row][j] = '.'; // backtracking step-always comes after function call
            }

        }

    }

    public static void printBoard(char board[][]) {
        System.out.println("----------- chess board -----------");
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }

    static int count = 0;

    public static void main(String[] args) {
        int n = 5;

        // creating board
        char board[][] = new char[n][n];

        // intitalizing board- empty board
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = '.';
            }
        }

        nQueens(board, 0);
        // 0 implies that started putting from 1st row

        System.out.println(count);
    }
}

-----------------------------------------print 1 solun

public class Java {

    public static boolean isSafe(char board[][], int row, int col) {
        // vertically up
        for (int i = row - 1; i >= 0; i--) {
            if (board[i][col] == 'Q') {
                return false;
            }
        }
        // dia left up
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }
        // dia right up
        for (int i = row - 1, j = col + 1; i >= 0 && j < board.length; i--, j++) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        return true;
    }

    public static boolean nQueens(char board[][], int row) {

        // BaseCase
        if (row == board.length) {
            // count += 1;
            return true;
        }

        // N QUEENS IN N ROWS
        // we will go at each column of row and sit queen without thinking about safe
        // and unsafe position of a queen
        // Column loop
        for (int j = 0; j < board.length; j++) {
            if (isSafe(board, row, j)) {
                board[row][j] = 'Q';

                if (nQueens(board, row + 1)) {
                    return true;
                }

                board[row][j] = '.'; // backtracking step-always comes after function call
            }

        }
        return false;

    }

    public static void printBoard(char board[][]) {
        System.out.println("----------- chess board -----------");
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }

    // static int count = 0;

    public static void main(String[] args) {
        int n = 5;

        // creating board
        char board[][] = new char[n][n];

        // intitalizing board- empty board
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = '.';
            }
        }

        if (nQueens(board, 0)) {
            printBoard(board);
        } else {
            System.out.println("solun not possible");
        }
        // 0 implies that started putting from 1st row

        // System.out.println(count);
    }
}


quest) Grid ways

public class Java {

    public static int gridWays(int i, int j, int n, int m) {
        // basecase
        if (i == n - 1 && j == m - 1) {// condn for last cell
            return 1;
        } else if (i == n || j == n) {// boundary cross condn
            return 0;
        }

        // recursion
        int w1 = gridWays(i + 1, j, n, m);// down
        int w2 = gridWays(i, j + 1, n, m);// right
        return w1 + w2;
    }

    public static void main(String[] args) {
        int n = 3;// row
        int m = 3;// col
        System.out.println(gridWays(0, 0, n, m));

    }
}
