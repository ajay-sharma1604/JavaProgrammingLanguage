Backtracking array

public class Java {

    public static void changeArr(int arr[], int index, int value) {

        // basecase
        if (index == arr.length) {
            printArr(arr);
            return;
        }
        // recursion
        arr[index] = value;
        changeArr(arr, index + 1, value + 1);
        arr[index] = arr[index] - 2;
    }

    public static void printArr(int arr[]) {
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int arr[] = new int[5];
        changeArr(arr, 0, 1);
        printArr(arr);
    }
}

output:-
1 2 3 4 5 
(-2 on each value)
-1 0 1 2 3 


-----------------------------------------------------------------------------------------------------------------------

Q) FIND SUBSWTA OF A SUVBSTRING
public class Java {

    public static void findSubsets(String str, int index, String ans) {

        // basecase
        if (index == str.length()) {
            if (ans.length() == 0) {
                System.out.println("null");
            } else {
                System.out.println(ans);
            }

            return;
        }

        // Recursion
        // yes choice
        findSubsets(str, index + 1, ans + str.charAt(index));

        // no choice
        findSubsets(str, index + 1, ans);
    }

    public static void main(String[] args) {
        String str = "abc";
        findSubsets(str, 0, "");
    }
}

Output:-
abc
ab
ac
a
bc
b
c
null


--------------------------------------------------------------------------------------------------------------------

ques) Find Permutation of String

public class Java {

    public static void findPermutation(String str, String ans) {

        // basecase
        if (str.length() == 0) {
            System.out.println(ans);
            return;
        }
        // recursion
        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            String Newstr = str.substring(0, i) + str.substring(i + 1);
            findPermutation(Newstr, ans + ch);
        }
    }

    public static void main(String[] args) {
        String str = "abc";
        findPermutation(str, "");
    }
}

output:-
abc
acb
bac
bca
cab
cba

