                                    Create a Graph


import java.util.*;

public class Basics {

    static class Edge {
        int src;
        int dest;
        int wt;

        public Edge(int s, int d, int w) {
            this.src = s;
            this.dest = d;
            this.wt = w;
        }
    }

    public static void main(String[] args) {
        int V = 5;
        // int arr[] =new arr[V];
        ArrayList<Edge> graph[] = new ArrayList[V]; // EVERY INDEX- NULL VALUE STORED(undefined)
        // null value - empty arraylist convert

        for (int i = 0; i < V; i++) {
            graph[i] = new ArrayList<>();
        }

        // edges define -in the form of array of arraylist(Adjancency list)
        // o ->vertex ,edge=1
        graph[0].add(new Edge(0, 1, 5));

        // 1 ->vertex, edge=3
        graph[1].add(new Edge(1, 0, 5));
        graph[1].add(new Edge(1, 2, 1));
        graph[1].add(new Edge(1, 3, 3));

        // 2 ->vertex , edge =3
        graph[2].add(new Edge(2, 1, 1));
        graph[2].add(new Edge(2, 3, 1));
        graph[2].add(new Edge(2, 4, 2));

        // 3 ->vertex, edge= 2
        graph[3].add(new Edge(3, 1, 3));
        graph[3].add(new Edge(3, 2, 1));

        // 4 ->vertex ,edge= 1
        graph[4].add(new Edge(4, 2, 2));

        // Find 2 neighbour
        for (int i = 0; i < graph[2].size(); i++) {
            Edge e = graph[2].get(i); // src,dest,wt
            System.out.println(e.dest);
        }

    }
}

Output:-
1
3
4

-------------------------------------------------------------------------------------------------------------------------------------------------------
                                              Breadth First Search(BFS)
**********************Learn this code**********************

import java.util.*;
import java.util.Queue;
import java.util.LinkedList;

public class Basics {

    static class Edge {
        int src;
        int dest;
        int wt; // bydefault wt=1, not mandatory

        public Edge(int s, int d, int w) {
            this.src = s;
            this.dest = d;
            this.wt = w;
        }
    }

    static void createGraph(ArrayList<Edge> graph[]) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<>();
        }
        // 0-> vertex, edge -2
        graph[0].add(new Edge(0, 1, 1));
        graph[0].add(new Edge(0, 2, 1));

        // 1 ->vertex, edge=2
        graph[1].add(new Edge(1, 0, 1));
        graph[1].add(new Edge(1, 3, 1));

        // 2 ->vertex , edge =3
        graph[2].add(new Edge(2, 0, 1));
        graph[2].add(new Edge(2, 4, 1));

        // 3 ->vertex, edge= 3
        graph[3].add(new Edge(3, 1, 1));
        graph[3].add(new Edge(3, 4, 1));
        graph[3].add(new Edge(3, 5, 1));

        // 4 ->vertex ,edge= 3
        graph[4].add(new Edge(4, 2, 1));
        graph[4].add(new Edge(4, 3, 1));
        graph[4].add(new Edge(4, 5, 1));

        // 5 ->vertex, edge=3
        graph[5].add(new Edge(5, 3, 1));
        graph[5].add(new Edge(5, 4, 1));
        graph[5].add(new Edge(5, 6, 1));

        // 6 ->vertex, edge=1
        graph[6].add(new Edge(6, 5, 1));
    }

    public static void bfs(ArrayList<Edge> graph[]) {   //O(V+E)
        Queue<Integer> q = new LinkedList<>();
        boolean vis[] = new boolean[graph.length];
        // assuming start/src=0
        q.add(0);

        while (!q.isEmpty()) {
            int curr = q.remove();
            if (!vis[curr]) { // visit curr
                System.out.print(curr + " ");
                vis[curr] = true;
                // neighbor add in queue
                for (int i = 0; i < graph[curr].size(); i++) {
                    Edge e = graph[curr].get(i);
                    q.add(e.dest);
                }

            }
        }

    }

    public static void main(String[] args) {
        int V = 7;
        ArrayList<Edge> graph[] = new ArrayList[V];
        createGraph(graph);
        bfs(graph);
    }

}

Output:-
0 1 2 3 4 5 6

-------------------------------------------------------------------------------------------------------------------------------------------------------
                                                    Depth First Search

import java.util.*;
import java.util.Queue;
import java.util.LinkedList;

public class Basics {

    static class Edge {
        int src;
        int dest;
        int wt; // bydefault wt=1, not mandatory

        public Edge(int s, int d, int w) {
            this.src = s;
            this.dest = d;
            this.wt = w;
        }
    }

    static void createGraph(ArrayList<Edge> graph[]) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<>();
        }
        // 0-> vertex, edge -2
        graph[0].add(new Edge(0, 1, 1));
        graph[0].add(new Edge(0, 2, 1));

        // 1 ->vertex, edge=2
        graph[1].add(new Edge(1, 0, 1));
        graph[1].add(new Edge(1, 3, 1));

        // 2 ->vertex , edge =3
        graph[2].add(new Edge(2, 0, 1));
        graph[2].add(new Edge(2, 4, 1));

        // 3 ->vertex, edge= 3
        graph[3].add(new Edge(3, 1, 1));
        graph[3].add(new Edge(3, 4, 1));
        graph[3].add(new Edge(3, 5, 1));

        // 4 ->vertex ,edge= 3
        graph[4].add(new Edge(4, 2, 1));
        graph[4].add(new Edge(4, 3, 1));
        graph[4].add(new Edge(4, 5, 1));

        // 5 ->vertex, edge=3
        graph[5].add(new Edge(5, 3, 1));
        graph[5].add(new Edge(5, 4, 1));
        graph[5].add(new Edge(5, 6, 1));

        // 6 ->vertex, edge=1
        graph[6].add(new Edge(6, 5, 1));
    }

    public static void dfs(ArrayList<Edge> graph[], int curr, boolean vis[]) {

        // curr visit
        System.out.print(curr + " ");
        vis[curr] = true;

        // call neighbour
        for (int i = 0; i < graph[curr].size(); i++) {
            Edge e = graph[curr].get(i);
            if (!vis[e.dest]) {
                dfs(graph, e.dest, vis);
            }
        }

    }

    public static void main(String[] args) {
        int V = 7;
        ArrayList<Edge> graph[] = new ArrayList[V];
        createGraph(graph);
        dfs(graph, 0, new boolean[V]);
    }

}

Output:-
0 1 3 4 2 5 6 

-------------------------------------------------------------------------------------------------------------------------------------------------------

                                                    Has Path?
import java.util.*;
import java.util.Queue;
import java.util.LinkedList;

public class Basics {

    static class Edge {
        int src;
        int dest;
        int wt; // bydefault wt=1, not mandatory

        public Edge(int s, int d, int w) {
            this.src = s;
            this.dest = d;
            this.wt = w;
        }
    }

    static void createGraph(ArrayList<Edge> graph[]) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<>();
        }
        // 0-> vertex, edge -2
        graph[0].add(new Edge(0, 1, 1));
        graph[0].add(new Edge(0, 2, 1));

        // 1 ->vertex, edge=2
        graph[1].add(new Edge(1, 0, 1));
        graph[1].add(new Edge(1, 3, 1));

        // 2 ->vertex , edge =3
        graph[2].add(new Edge(2, 0, 1));
        graph[2].add(new Edge(2, 4, 1));

        // 3 ->vertex, edge= 3
        graph[3].add(new Edge(3, 1, 1));
        graph[3].add(new Edge(3, 4, 1));
        graph[3].add(new Edge(3, 5, 1));

        // 4 ->vertex ,edge= 3
        graph[4].add(new Edge(4, 2, 1));
        graph[4].add(new Edge(4, 3, 1));
        graph[4].add(new Edge(4, 5, 1));

        // 5 ->vertex, edge=3
        graph[5].add(new Edge(5, 3, 1));
        graph[5].add(new Edge(5, 4, 1));
        graph[5].add(new Edge(5, 6, 1));

        // 6 ->vertex, edge=1
        graph[6].add(new Edge(6, 5, 1));
    }

    //O(V+E)
    public static boolean hasPath(ArrayList<Edge> graph[], int src, int dest, boolean vis[]) {
        if (src == dest) {
            return true;
        }
        vis[src] = true;
        for (int i = 0; i < graph[src].size(); i++) {
            Edge e = graph[src].get(i);
            // e.dest =neighbour
            if (!vis[e.dest] && hasPath(graph, e.dest, dest, vis)) {
                return true;
            }
        }
        return false;
    }

    public static void main(String[] args) {
        int V = 7;
        ArrayList<Edge> graph[] = new ArrayList[V];
        createGraph(graph);
        System.out.println(hasPath(graph, 0, 5, new boolean[V]));
    }

}

Output:-
true


