4 major pillars of oops - encapsulation ,inheritance, polymorphism, abstraction


1) Classes and Objects

public class Basics{
    public static void main(String[] args) {
        Pen p1=new Pen(); //created a pen object called p1
        p1.setColor("Blue");
        System.out.println(p1.color);
        p1.setTip(5);
        System.out.println(p1.tip);
        //p1.setColor("Yellow");
        p1.color="Yellow"; //directly set color without calling function
        System.out.println(p1.color);//color changed from blue to yellow

    }
}


//blueprint of Pen Object
class Pen{
    String color;
    int tip;

    void setColor(String newColor){
        color =newColor;
    }

    void setTip(int newTip){
        tip = newTip;
    }
}

//blueprint of Student Object
class Student{
    String name;
    int age;
    float percentage; //cgpa

    void calcPercentage(int phy, int chem ,int math){
        percentage =(phy + chem + math) /3;
    }
}


2)Getter and Setters

public class Basics{
    public static void main(String[] args) {
        Pen p1= new Pen();  //created a pen object called p1

        //set color to blue abd print by get
        p1.setColor("Blue");
        System.out.println(p1.getColor());

        //set tip to 5 and print by get
        p1.setTip(5);
        System.out.println(p1.getTip());

        //set color to yellow and print by get
        p1.setColor("Yellow");
        System.out.println(p1.getColor());
    }
}

class Pen{
    private String color;
    private int tip;

    //Getters

    String getColor(){      //get function get the value from object calling it
        return this.color;  //this will return the object value which is calling get function
    }

    int getTip(){   //get function get the value from object calling it
        return this.tip;//this return the value by object
    }

    //Setters


    void setColor(String newColor){ //set function is modifying the value
        this.color =newColor;   //this will return the modified value
    }

    void setTip(int tip){//set function is modifying the value
        this.tip =tip;      //this return modified value
                            //this.tip is property "tip" of the Pen
    }
}


3) Constructor

public class Basics{
    public static void main(String[] args) {
        Student s1 =new Student("Brocklesnar");   //when constructor is called name is passed as parameter
        System.out.println(s1.name);
     }
}

class Student{
    String name;
    int roll;

    Student(String name){
        //parameter name is passed to property name using this keyword
        this.name = name ;  //initisalize the value of object using constructor
    }
}

------------------------------------------------

public class Basics{
    public static void main(String[] args) {
        Student s1 =new Student(); 
}
}
class Student{
    String name;
    int roll;

    //when we dont want to pass the value in constructor we can simply print also
    Student(){
       System.out.println("constructor is called");
    }
}


3) Type of constructors

public class Basics{
    public static void main(String[] args) {
        //default is made by java when no other constructor is already present

        //constructor overloading
        Student s1 =new Student(); 
        Student s2 =new Student("ajay");
        Student s3 =new Student(123);
}
}
class Student{
    String name;
    int roll;

    //non paramterized constructor
    Student(){
       System.out.println("constructor is called");
    }

    //paramterised constructor with string paramter
    Student(String name){
        this.name =name;
    }

    //parameterised constructor with integer parameter
    Student(int roll){
        this.roll=roll;
    }
}


4) Copy Constructor

public class Basics{

    public static void main(String[] args) {
        Student s1 =new Student();
        s1.name ="ajay";
        s1.roll =123;
        s1.password ="abcd";
        s1.marks[0]=100;
        s1.marks[1]=90;
        s1.marks[2]=80;

        Student s2 =new Student(s1);//pass s1 as paramter
       s2.password ="xyz";
        s1.marks[2]=100; //s2 is changed even copied before because only reference is copied of the array
       //printing s2 marks

       for(int i=0;i<3;i++){
        System.out.println(s2.marks[i]);
       }
    }
}

class Student{
    String name;
    int roll;
    String password;
    int marks[];

    //copy constructor
    //all properties of s1 copied to s2 by passing Student s1 as paramter(khudkaobject  in constrcutor  as paramter)
    Student(Student s1){
        this.name= s1.name;
        this.roll=s1.roll;
        marks =new int[3];
        this.marks=s1.marks;
    }

    Student(){
        marks=new int[3];
        System.out.println("constrcutor is called");
    }
}


5) Shallow and deep copy

public class Basics{

    public static void main(String[] args) {
        Student s1 =new Student();
        s1.name ="ajay";
        s1.roll =123;
        s1.password ="abcd";
        s1.marks[0]=100;
        s1.marks[1]=90;
        s1.marks[2]=80;

        Student s2 =new Student(s1);//pass s1 as paramter
       s2.password ="xyz";
        s1.marks[2]=100; //s2 is changed even copied before because only reference is copied of the array
       //printing s2 marks

       for(int i=0;i<3;i++){
        System.out.println(s2.marks[i]);
       }
    }
}

class Student{
    String name;
    int roll;
    String password;
    int marks[];

                                //Shallow copy constructor-s2  marks are changed 
    //copy constructor
    //all properties of s1 copied to s2 by passing Student s1 as paramter(khudkaobject  in constrcutor  as paramter)
    // Student(Student s1){
    //     this.name= s1.name;
    //     this.roll=s1.roll;
    //     marks =new int[3];
    //     this.marks=s1.marks;
    // }


                            //deep copy constructor-this time s2 marks will be unchanged 
    Student(Student s1){
        this.name= s1.name;
         this.roll=s1.roll;
         marks =new int[3];
         for(int i=0;i<3;i++){
            this.marks[i]=s1.marks[i];
         }
    }


    Student(){
        marks=new int[3];
        System.out.println("constrcutor is called");
    }
}


6) Inheritance


//properties and fucntion of animal can be called for fish

public class Basics{
    public static void main(String[] args) {
        Fish shark =new Fish();
        shark.eat(); //this function is not in fish but fish is derived class of animal,by defualt shark will automaticallly have eat function
    }
}


//Base Class
class Animal{

    String color;

    void eat(){
        System.out.println("eats");
    }

    void breathe(){
        System.out.println("breathes");
    }
}

//Derived or sub class
class Fish extends Animal {

    int fins;

    void swim(){
        System.out.println("swims in water");
    }
}

7) MultiLevel Inheritaance

public class Basics{
    public static void main(String[] args) {
        Dog tommy = new Dog();
        tommy.eat();
        tommy.legs =4;
        System.out.println(tommy.legs);
    }
}


//Base Class
class Animal{

    String color;

    void eat(){
        System.out.println("eats");
    }

    void breathe(){
        System.out.println("breathes");
    }
}

//Derived or sub class
class Mammal extends Animal {

    int legs;

}


//Derived class
class Dog extends Mammal{

    String breed;

}


8) Hierarchical inheritance

public class Basics{
    public static void main(String[] args) {
        Mammal m1 =new Mammal();
        m1.breathe();
    }
}

//all properites and functions of animal class can be derived by object of mammal,fish,bird
//Base Class
class Animal{

    String color;

    void eat(){
        System.out.println("eats");
    }

    void breathe(){
        System.out.println("breathes");
    }
}


class Mammal extends Animal {

    void walk(){
        System.out.println("walks");
    }

}

class Fish extends Animal{
    void swim(){
        System.out.println("swims");
    }
}

class Bird extends Animal{

    void fly(){
        System.out.println("fly");
    }
}


9) Method Overloading

//COMPILE TIME POLYMORPHISM - METHOD OVERLOADING
//compiler in its compile time already know when to call which function

public class Basics{

    public static void main(String[] args) {
        Calculator calc =new Calculator();
        System.out.println(calc.sum(1, 2));
        System.out.println(calc.sum(1.5f,2.5F));
        System.out.println(calc.sum(1,2,3));
    }
}

class Calculator{


    //parameters differ by type and count
    int sum(int a,int b){
        return a+b;
    }

    float sum(float a, float b){
        return a+b;
    }

    int sum(int a,int b, int c){
        return a+b+c;
    }
}


10) Method Overriding

//RUN TIME POLYMORPHISM - METHOD OVERRIDING

//parents class and child class have same function with diff definition
public class Basics{

    public static void main(String[] args) {
       Deer d =new Deer();
       d.eats();//IT WILL CALL CHILD CLASS OBJECT
    }
}


class Animal{

    void eats(){
        System.out.println("eats anything");
    }
}


class Deer extends Animal{

    void eats(){
        System.out.println("eats grass");
    }
}


11) Abstract class

//whenever we create object of child class then firstly constructor of parent class is called 

//constructor not only used for initislize object but also used for intisaling variable for child class object

public class Basics{
    public static void main(String[] args) {
        Horse h =new Horse();
        h.eats();
        h.walk();
        Chicken c=new Chicken();
        c.eats();
        c.walk();

        //We cannot create any abject of an abstract class
        //Animal a =new Animal(); -this will give error

        System.out.println(h.color);
        System.out.println(c.color);
        
         h.changeColor();
         c.changeColor();
    }
}

abstract class Animal{

    String color;
    //creating constructor

    Animal(){
        color ="brown";
    }

    void eats(){
        System.out.println("animal eats");
    }

    abstract void walk(); //it is not implementation but idea that tells walk function must exist with return type void and wiht no parameter and this must be present in each dervied class
}

class Horse extends Animal{

    //by default color of horse will be brown because of constructor of parent class and change when changeColor function is called of child class

    void changeColor(){
        color="dark brown";
        System.out.println(color);
    }
    void walk(){
        System.out.println("walks on 4 legs");
    }
}

class Chicken extends Animal{
//by default color of chicken will be brown because of constructor of parent class and change when changeColor function is called of child class

    void changeColor(){
        color="yellow";
        System.out.println(color);
    }
    void walk(){
        System.out.println("walks on 2 legs");
    }
}



//first parent class constructor is called then next and then next

public class Basics{
    public static void main(String[] args) {
        Mustang m =new Mustang();
        //Animal ->Horse ->Mustang
    }
}

abstract class Animal{
    Animal(){
        System.out.println("Animal constructor called");
    }
}

class Horse extends Animal{
    Horse(){
        System.out.println("Horse constructor called");
    }
}

class Mustang extends Horse{
    Mustang(){
        System.out.println("Mustang constructor called");
    }
}


12) Interfaces

public class Basics{
    public static void main(String[] args) {
        Queen q =new Queen();
        q.moves();
    }
}

interface chessPlayer{
    void moves();//by defualt public and abstract,implementation cannot be writen becuase we want to achieve abstraction
}

class Queen implements chessPlayer{//function need to be recreated with implementation
    public void moves(){//public keyword must be written otherwise by default moves will be default type
        System.out.println("up,doen,left,right,diagonal (in all 4 direction)");
    }
}

class Rook implements chessPlayer{
    public void moves(){
        System.out.println("up,down,left,right");
    }
}

class King implements chessPlayer{
    public void moves(){
        System.out.println("up,down,left,right,diagonal (by 1 step)");
    }
}
