1) Classes and Objects

public class Basics{
    public static void main(String[] args) {
        Pen p1=new Pen(); //created a pen object called p1
        p1.setColor("Blue");
        System.out.println(p1.color);
        p1.setTip(5);
        System.out.println(p1.tip);
        //p1.setColor("Yellow");
        p1.color="Yellow"; //directly set color without calling function
        System.out.println(p1.color);//color changed from blue to yellow

    }
}


//blueprint of Pen Object
class Pen{
    String color;
    int tip;

    void setColor(String newColor){
        color =newColor;
    }

    void setTip(int newTip){
        tip = newTip;
    }
}

//blueprint of Student Object
class Student{
    String name;
    int age;
    float percentage; //cgpa

    void calcPercentage(int phy, int chem ,int math){
        percentage =(phy + chem + math) /3;
    }
}


2)Getter and Setters

public class Basics{
    public static void main(String[] args) {
        Pen p1= new Pen();  //created a pen object called p1

        //set color to blue abd print by get
        p1.setColor("Blue");
        System.out.println(p1.getColor());

        //set tip to 5 and print by get
        p1.setTip(5);
        System.out.println(p1.getTip());

        //set color to yellow and print by get
        p1.setColor("Yellow");
        System.out.println(p1.getColor());
    }
}

class Pen{
    private String color;
    private int tip;

    //Getters

    String getColor(){      //get function get the value from object calling it
        return this.color;  //this will return the object value which is calling get function
    }

    int getTip(){   //get function get the value from object calling it
        return this.tip;//this return the value by object
    }

    //Setters


    void setColor(String newColor){ //set function is modifying the value
        this.color =newColor;   //this will return the modified value
    }

    void setTip(int tip){//set function is modifying the value
        this.tip =tip;      //this return modified value
                            //this.tip is property "tip" of the Pen
    }
}


3) Constructor

public class Basics{
    public static void main(String[] args) {
        Student s1 =new Student("Brocklesnar");   //when constructor is called name is passed as parameter
        System.out.println(s1.name);
     }
}

class Student{
    String name;
    int roll;

    Student(String name){
        //parameter name is passed to property name using this keyword
        this.name = name ;  //initisalize the value of object using constructor
    }
}

------------------------------------------------

public class Basics{
    public static void main(String[] args) {
        Student s1 =new Student(); 
}
}
class Student{
    String name;
    int roll;

    //when we dont want to pass the value in constructor we can simply print also
    Student(){
       System.out.println("constructor is called");
    }
}
