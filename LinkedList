                                                                                      Basic structure

public class LinkedList {
    public static class Node {
        int data;
        Node next;

        // Constructor
        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    // head and tail are directly accessible as all information is in single class
    // it linkedlist class
    public static Node head;
    public static Node tail;


    public static void main(String args[]) {
        LinkedList ll = new LinkedList();
        ll.addFirst(1);
        ll.addFirst(2);
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                                                    Add First

public class LinkedList {
    public static class Node {
        int data;
        Node next;

        // Constructor
        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    // head and tail are directly accessible as all information is in single class
    // it linkedlist class
    public static Node head;
    public static Node tail;

    // Methods- we will call not directly from main, call using ll object, it can be
    // static or non static

    public void addFirst(int data) {

        // step-1 create new node
        Node newNode = new Node(data);

        // when linkedlist is empty
        if (head == null) {
            head = tail = newNode;
            return;
        }

        // when linkedList have 1 or more node

        // step2 - newNode next =head
        newNode.next = head; // link

        // step3 - head=newNode
        head = newNode;
    }

    public static void main(String args[]) {
        LinkedList ll = new LinkedList();
        ll.addFirst(1);
        ll.addFirst(2);
    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                        Add last

public class LinkedList {
    public static class Node {
        int data;
        Node next;

        // Constructor
        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public static Node head;
    public static Node tail;

    public void addLast(int data) {
        // create new node
        Node newNode = new Node(data);

        // special case-empty ll
        if (head == null) { // tail==null is also correct but by convention when head is null then we
                            // consider ll is empty

            head = tail = newNode;
            return;
        }

        tail.next = newNode;
        tail = newNode;
    }

    public static void main(String args[]) {
        LinkedList ll = new LinkedList();
        ll.addLast(3);
        ll.addLast(4);

    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                              Print Linked List

public class LinkedList {
    public static class Node {
        int data;
        Node next;

        // Constructor
        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public static Node head;
    public static Node tail;

    public void addFirst(int data) {

        Node newNode = new Node(data);
        if (head == null) {
            head = tail = newNode;
            return;
        }
        newNode.next = head;
        head = newNode;
    }

    public void addLast(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = tail = newNode;
            return;
        }
        tail.next = newNode;
        tail = newNode;
    }

    // Print likedlist - no parameters needed already we have head and tail

    public void print() {

        if (head == null) {
            System.out.println("ll is empty");
            return;
        }//output will be null if be dont write this case
        
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + "->");
            temp = temp.next;
        }
        System.out.println("null");

    }

    public static void main(String args[]) {
        LinkedList ll = new LinkedList();
        ll.print();
        ll.addFirst(2);
        ll.print();
        ll.addFirst(1);
        ll.print();
        ll.addLast(3);
        ll.print();
        ll.addLast(4);
        ll.print();

    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                  Add in the Middle


public class LinkedList {

    public static class Node {
        int data;
        Node next;

        // Constructor
        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public static Node head;
    public static Node tail;

    public void addFirst(int data) {

        Node newNode = new Node(data);
        if (head == null) {
            head = tail = newNode;
            return;
        }
        newNode.next = head;
        head = newNode;
    }

    public void addLast(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = tail = newNode;
            return;
        }
        tail.next = newNode;
        tail = newNode;
    }

    public void print() {

        if (head == null) {
            System.out.println("ll is empty");
            return;
        }
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + "->");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public void add(int idx, int data) {


        //when insert at head, it is imp to change head also
        if (idx == 0) {
            addFirst(data);
            return;
        }

        //all other cases we can handle

        // Create new node
        Node newNode = new Node(data);
        // take temporary
        Node temp = head;
        int i = 0; // index for tracking temp

        while (i < idx - 1) {
            temp = temp.next;
            i++;
        }

        // i =idx-1 temp->prev temp is equal to previous
        newNode.next = temp.next;
        temp.next = newNode;
    }

    public static void main(String args[]) {
        LinkedList ll = new LinkedList();

        ll.addFirst(2);
        ll.addFirst(1);
        ll.addLast(3);
        ll.addLast(4);
        ll.add(2, 9);

        ll.print();

    }
}



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                          Size of a linked list      


public class LinkedList {

    public static class Node {
        int data;
        Node next;

        // Constructor
        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public static Node head;
    public static Node tail;
    public static int size; // change

    public void addFirst(int data) {

        Node newNode = new Node(data);
        size++; // change
        if (head == null) {
            head = tail = newNode;
            return;
        }
        newNode.next = head;
        head = newNode;
    }

    public void addLast(int data) {
        Node newNode = new Node(data);
        size++; // change
        if (head == null) {
            head = tail = newNode;
            return;
        }
        tail.next = newNode;
        tail = newNode;
    }

    public void print() {

        if (head == null) {
            System.out.println("ll is empty");
            return;
        }
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + "->");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public void add(int idx, int data) {

        if (idx == 0) {
            addFirst(data);
            return;
        }
        Node newNode = new Node(data);

        size++; // change

        Node temp = head;
        int i = 0;

        while (i < idx - 1) {
            temp = temp.next;
            i++;
        }
        newNode.next = temp.next;
        temp.next = newNode;
    }

    public static void main(String args[]) {
        LinkedList ll = new LinkedList();

        ll.addFirst(2);
        ll.addFirst(1);
        ll.addLast(4);
        ll.addLast(5);
        ll.add(2, 3);
        ll.print();
        System.out.println(ll.size);

    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                            RemoveFirst in a linked list

public class LinkedList {

    public static class Node {
        int data;
        Node next;

        // Constructor
        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public static Node head;
    public static Node tail;
    public static int size;

    public void addFirst(int data) {

        Node newNode = new Node(data);
        size++; // change
        if (head == null) {
            head = tail = newNode;
            return;
        }
        newNode.next = head;
        head = newNode;
    }

    public void addLast(int data) {
        Node newNode = new Node(data);
        size++; // change
        if (head == null) {
            head = tail = newNode;
            return;
        }
        tail.next = newNode;
        tail = newNode;
    }

    public void print() {

        if (head == null) {
            System.out.println("ll is empty");
            return;
        }
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + "->");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public void add(int idx, int data) {

        if (idx == 0) {
            addFirst(data);
            return;
        }
        Node newNode = new Node(data);

        size++;

        Node temp = head;
        int i = 0;

        while (i < idx - 1) {
            temp = temp.next;
            i++;
        }
        newNode.next = temp.next;
        temp.next = newNode;
    }

    // change

    public int removeFirst() {// head is present already no parameter is needed

        // special cases

        if (size == 0) {
            System.out.println("ll is empty");
            return Integer.MIN_VALUE; // any invalid value
        } else if (size == 1) {
            int val = head.data;
            head = tail = null;
            size = 0;
            return val;
        }

        // normal cases

        int val = head.data;
        head = head.next;
        size--;
        return val;
    }

    public static void main(String args[]) {
        LinkedList ll = new LinkedList();

        ll.addFirst(2);
        ll.addFirst(1);
        ll.addLast(4);
        ll.addLast(5);
        ll.add(2, 3);
        ll.print();
        System.out.println(ll.size);
        ll.removeFirst(); // change
        ll.print();
        System.out.println(ll.size);

    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                        RemoveLast in a linked list

public class LinkedList {

    public static class Node {
        int data;
        Node next;

        // Constructor
        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public static Node head;
    public static Node tail;
    public static int size;

    public void addFirst(int data) {

        Node newNode = new Node(data);
        size++; // change
        if (head == null) {
            head = tail = newNode;
            return;
        }
        newNode.next = head;
        head = newNode;
    }

    public void addLast(int data) {
        Node newNode = new Node(data);
        size++; // change
        if (head == null) {
            head = tail = newNode;
            return;
        }
        tail.next = newNode;
        tail = newNode;
    }

    public void print() {

        if (head == null) {
            System.out.println("ll is empty");
            return;
        }
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + "->");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public void add(int idx, int data) {

        if (idx == 0) {
            addFirst(data);
            return;
        }
        Node newNode = new Node(data);

        size++;

        Node temp = head;
        int i = 0;

        while (i < idx - 1) {
            temp = temp.next;
            i++;
        }
        newNode.next = temp.next;
        temp.next = newNode;
    }

    // change

    public int removeLast() {
        if (size == 0) {
            System.out.println("LL is empty");
            return Integer.MIN_VALUE;
        } else if (size == 1) {
            int val = tail.data;
            head = tail = null;
            size = 0;
            return val;
        }

        // prev: i=size-2
        Node prev = head;
        for (int i = 0; i < size - 2; i++) {
            prev = prev.next;
        }
        int val = prev.next.data; // tail.data
        prev.next = null;
        prev = head;
        size--;
        return val;
    }

    public static void main(String args[]) {
        LinkedList ll = new LinkedList();

        ll.addFirst(2);
        ll.addFirst(1);
        ll.addLast(4);
        ll.addLast(5);
        ll.add(2, 3);
        ll.print();
        System.out.println(ll.size);
        ll.removeLast(); // change
        ll.print();
        System.out.println(ll.size);

    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                              //Search (Iteratively) in Linked List

    public static int iterativeSearch(int key) {
        int i = 0;
        Node temp = head;
        while (temp != null) {
            if (temp.data == key) {
                return i;
            }
            temp = temp.next;
            i++;
        }
        return -1;
    }

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                              //Recursive Search in Linked List

public class LinkedList {

    public static class Node {
        int data;
        Node next;

        // Constructor
        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public static Node head;
    public static Node tail;
    public static int size;

    public void addFirst(int data) {

        Node newNode = new Node(data);
        size++; // change
        if (head == null) {
            head = tail = newNode;
            return;
        }
        newNode.next = head;
        head = newNode;
    }

    public void addLast(int data) {
        Node newNode = new Node(data);
        size++; // change
        if (head == null) {
            head = tail = newNode;
            return;
        }
        tail.next = newNode;
        tail = newNode;
    }

    public void print() {

        if (head == null) {
            System.out.println("ll is empty");
            return;
        }
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + "->");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public void add(int idx, int data) {

        if (idx == 0) {
            addFirst(data);
            return;
        }
        Node newNode = new Node(data);

        size++;

        Node temp = head;
        int i = 0;

        while (i < idx - 1) {
            temp = temp.next;
            i++;
        }
        newNode.next = temp.next;
        temp.next = newNode;
    }
-------------------------------------------------------------------------------------
    public int helper(Node head, int key) {

          // base case
        if (head == null) {
            return -1;
        }
        if (head.data == key) {
            return 0;
        }

        // recursion
        int index = helper(head.next, key);
        if (index == -1) {
            return -1;
        }
        return index + 1;
    }

    public int recursiveSearch(int key) {
        return helper(head, key);
    }
-------------------------------------------------------------------------------------------
    public static void main(String args[]) {
        LinkedList ll = new LinkedList();

        ll.addFirst(2);
        ll.addFirst(1);
        ll.addLast(4);
        ll.addLast(5);
        ll.add(2, 3);
        ll.print();
        System.out.println(ll.recursiveSearch(5));

    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                          Reverse Linked List


public class LinkedList {

    public static class Node {
        int data;
        Node next;

        // Constructor
        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public static Node head;
    public static Node tail;
    public static int size;

    public void addFirst(int data) {

        Node newNode = new Node(data);
        size++; // change
        if (head == null) {
            head = tail = newNode;
            return;
        }
        newNode.next = head;
        head = newNode;
    }

    public void addLast(int data) {
        Node newNode = new Node(data);
        size++; // change
        if (head == null) {
            head = tail = newNode;
            return;
        }
        tail.next = newNode;
        tail = newNode;
    }

    public void print() {

        if (head == null) {
            System.out.println("ll is empty");
            return;
        }
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + "->");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public void add(int idx, int data) {

        if (idx == 0) {
            addFirst(data);
            return;
        }
        Node newNode = new Node(data);

        size++;

        Node temp = head;
        int i = 0;

        while (i < idx - 1) {
            temp = temp.next;
            i++;
        }
        newNode.next = temp.next;
        temp.next = newNode;
    }
---------------------------------------------------
    public void reverse() {
        Node prev = null;
        Node curr = tail = head;
        Node next;

        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        head = prev;
    }
--------------------------------------------------
    public static void main(String args[]) {
        LinkedList ll = new LinkedList();

        ll.addFirst(2);
        ll.addFirst(1);
        ll.addLast(4);
        ll.addLast(5);
        ll.add(2, 3);
        ll.print();
        ll.reverse();
        ll.print();

    }
}


Output:
1->2->3->4->5->null
5->4->3->2->1->null


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                          Delete NthnodeFromEnd

  public void deleteNthfromEnd(int n) {

        // calculate size
        int sz = 0;
        Node temp = head;
        while (temp != null) {
            temp = temp.next;
            sz++;
        }

        // head element delete
        if (n == sz) {
            head = head.next; // removeFirst
            return;
        }

        // all other element delete- size-n
        int i = 1;
        int iToFind = sz - n;
        Node prev = head;
        while (i < iToFind) {
            prev = prev.next; // prev=2
            i++;
        }
        prev.next = prev.next.next;// 2->4
        return;

    }

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                              Linked list is palindrome or not

public class LinkedList {

    public static class Node {
        int data;
        Node next;

        // Constructor
        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public static Node head;
    public static Node tail;
    public static int size;

    public void addFirst(int data) {

        Node newNode = new Node(data);
        size++; // change
        if (head == null) {
            head = tail = newNode;
            return;
        }
        newNode.next = head;
        head = newNode;
    }

    public void addLast(int data) {
        Node newNode = new Node(data);
        size++; // change
        if (head == null) {
            head = tail = newNode;
            return;
        }
        tail.next = newNode;
        tail = newNode;
    }

    public void print() {

        if (head == null) {
            System.out.println("ll is empty");
            return;
        }
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + "->");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public void add(int idx, int data) {

        if (idx == 0) {
            addFirst(data);
            return;
        }
        Node newNode = new Node(data);

        size++;

        Node temp = head;
        int i = 0;

        while (i < idx - 1) {
            temp = temp.next;
            i++;
        }
        newNode.next = temp.next;
        temp.next = newNode;
    }

    // slow-fast approach

    public Node findMid(Node head) { // helperfunction
        Node slow = head;
        Node fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next; // +1
            fast = fast.next.next; // +2
        }
        return slow; // slow is mid node
    }

    public boolean checkPalindrome() {
        // basecase
        if (head == null || head.next == null) { // empty linked list or single node ll
            return true;
        }

        // step1- find mid
        Node midNode = findMid(head);

        // step2- reverse 2nd half
        Node prev = null;
        Node curr = midNode;
        Node next;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        Node right = prev; // right half head;
        Node left = head;

        // step3 - check left and right half
        while (right != null) {
            if (left.data != right.data) {
                return false;
            }
            left = left.next;
            right = right.next;
        }
        return true;
    }

    public static void main(String args[]) {
        LinkedList ll = new LinkedList();

        ll.addLast(1);
        ll.addLast(2);
        ll.addLast(1);
        // ll.addLast(1);
        ll.print(); // 1->2->2->1
        System.out.println(ll.checkPalindrome());

    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                        Detecting A Cycle in LinkedList

public class LinkedList {

    public static class Node {
        int data;
        Node next;

        // Constructor
        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public static Node head;
    public static Node tail;
    public static int size;

    public void print() {

        if (head == null) {
            System.out.println("ll is empty");
            return;
        }
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + "->");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public static boolean isCycle() {
        // Flyoid's cycle finding algo
        Node slow = head;
        Node fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;// +1;
            fast = fast.next.next;// +2;
            if (slow == fast) {
                return true;// cycle exist
            }
        }
        return false;// cycle doesn't exist
    }

    public static void main(String args[]) {
        head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        // head.next.next.next = head;
        // 1->2->3->1
        System.out.println(isCycle());

    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                            Remove a loop/cycle in a linked list

public class LinkedList {

    public static class Node {
        int data;
        Node next;

        // Constructor
        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public static Node head;
    public static Node tail;
    public static int size;

    public void print() {

        if (head == null) {
            System.out.println("ll is empty");
            return;
        }
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + "->");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public static boolean isCycle() {
        // Flyoid's cycle finding algo
        Node slow = head;
        Node fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;// +1;
            fast = fast.next.next;// +2;
            if (slow == fast) {
                return true;// cycle exist
            }
        }
        return false;// cycle doesn't exist
    }

    public static void removeCycle() {

        // detect cycle
        Node slow = head;
        Node fast = head;
        boolean cycle = false;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (fast == slow) {
                cycle = true;
                break;
            }
        }

        // if no cycle then stop
        if (cycle == false) {
            return;
        }

        // if their is a cycle

        // Find meeting point (slow=fast)

        slow = head;
        Node prev = null; // lastnode
        while (slow != fast) {
            prev = fast;
            slow = slow.next; // +1
            fast = fast.next; // +1
        }

        // remove cycle -lastnode.next ->null
        prev.next = null; // prev=lastnode
    }

    public static void main(String args[]) {
        head = new Node(1);
        Node temp = new Node(2);
        head.next = temp; // 1->2
        head.next.next = new Node(3); // 1->2->3
        head.next.next.next = temp; // 1->2->3->2
        System.out.println(isCycle());
        removeCycle();
        System.out.println(isCycle());

    }
}





-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                        Merge sort on a linked list
import java.util.*;

public class LinkedList {

    public static class Node {
        int data;
        Node next;

        // Constructor
        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public static Node head;
    public static Node tail;
    public static int size;

    public void addFirst(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = tail = newNode;
            return;
        }
        newNode.next = head;
        head = newNode;
    }

    public void print() {

        if (head == null) {
            System.out.println("ll is empty");
            return;
        }
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + "->");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public Node getMid(Node head) {
        Node slow = head;
        Node fast = head.next;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow; // slow is my mid node
    }

    public Node merge(Node head1, Node head2) {
        Node mergedLL = new Node(-1);
        Node temp = mergedLL;

        while (head1 != null && head2 != null) {
            if (head1.data <= head2.data) {
                temp.next = head1;
                head1 = head1.next; // update head1
                temp = temp.next; // update temp
            } else {
                temp.next = head2;
                head2 = head2.next; // update head2
                temp = temp.next; // update temp
            }
        }

        // for left elements
        while (head1 != null) {
            temp.next = head1;
            head1 = head1.next;// update head1
            temp = temp.next;// update temp
        }

        while (head2 != null) {
            temp.next = head2;
            head2 = head2.next;
            temp = temp.next;
        }

        return mergedLL.next; // deleted -1 node stored on head
    }

    public Node mergeSort(Node head) {

        // basecase- ll is empty or single node ll: -in these cases ll is considered
        // sorted
        if (head == null || head.next == null) {
            return head;
        }

        // find mid
        Node mid = getMid(head);

        // left and right half call MS
        Node rightHead = mid.next;
        mid.next = null;
        Node newLeft = mergeSort(head); // mergesort call for left half
        Node newRight = mergeSort(rightHead);// mergesort call for right half

        // merge
        return merge(newLeft, newRight);
    }

    public static void main(String args[]) {
        LinkedList ll = new LinkedList();
        ll.addFirst(1);
        ll.addFirst(2);
        ll.addFirst(3);
        ll.addFirst(4);
        ll.addFirst(5);
        // 5->4->3->2->!
        ll.print();
        ll.head = ll.mergeSort(ll.head);
        ll.print();
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                             
                                                                  Singly ll -ZigZag ll

import java.util.*;

public class LinkedList {

    public static class Node {
        int data;
        Node next;

        // Constructor
        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public static Node head;
    public static Node tail;
    public static int size;

    public void addLast(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = tail = newNode;
            return;
        }
        tail.next = newNode;
        tail = newNode;
    }

    public void print() {

        if (head == null) {
            System.out.println("ll is empty");
            return;
        }
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + "->");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public void zigzag() {

        // find mid
        Node slow = head;
        Node fast = head.next;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        Node mid = slow;

        // reverse 2nd half
        Node curr = mid.next;
        mid.next = null;
        Node prev = null;
        Node next;

        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        Node left = head;
        Node right = prev;
        Node nextL, nextR;

        // Alternate Merginh
        while (left != null && right != null) {
            nextL = left.next;
            left.next = right;
            nextR = right.next;
            right.next = nextL;

            // update
            left = nextL;
            right = nextR;
        }
    }

    public static void main(String args[]) {
        LinkedList ll = new LinkedList();
        ll.addLast(1);
        ll.addLast(2);
        ll.addLast(3);
        ll.addLast(4);
        ll.addLast(5);
        ll.addLast(6);
        // 1->2->3->4->5
        ll.print();
        ll.zigzag();
        ll.print();
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                              Doubly Linked List

************************************************************Basic structure*************************************************************

public class DoubleLL {

    public class Node {
        int data;
        Node next;
        Node prev;
        // constructor

        public Node(int data) {
            this.data = data;
            this.next = null;
            this.prev = null;
        }
    }

    public static Node head;
    public static Node tail;
    public static int size;

    public static void main(String args[]) {
        DoubleLL ddl = new DoubleLL();
        
    }

}

*******************************************************************************************************************************************
