                                                                                    Stack using ArrayList

import java.util.ArrayList;

public class StackB {

    static class Stack {
        // creating ArrayList
        static ArrayList<Integer> list = new ArrayList<>();

        // isEmpty()
        public static boolean isEmpty() {
            return list.size() == 0;
        }

        // push
        public static void push(int data) { // data- to push
            list.add(data);
        }

        // pop
        public static int pop() {
            // list empty
            if (isEmpty()) { // when function return true
                return -1;
            }
            int top = list.get(list.size() - 1); // store value before deleting
            list.remove(list.size() - 1); // delete
            return top;
        }

        // peek
        public static int peek() {
            // list empty
            if (isEmpty()) {
                return -1;
            }
            return list.get(list.size() - 1);
        }
    }

    public static void main(String[] args) {
        // creating stack
        Stack s = new Stack();
        // PERFORMNG PUSH OPERATION
        s.push(1);
        s.push(2);
        s.push(3);

        // Run loop until stack gets empty
        while (!s.isEmpty()) {
            System.out.println(s.peek());
            s.pop();
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                    Stack using LinkedList
public class StackB {
    // Node class representing node of linked list
    static class Node {
        int data;
        Node next;

        // constructor
        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    static class Stack {
        // creating Head node -static type so all func able to access this

        static Node head = null; // initialize head with null

        // isEmpty()
        public static boolean isEmpty() {
            return head == null; // when head is null then ll is empty return true, else false
        }

        // push()
        public static void push(int data) {
            // create new node
            Node newNode = new Node(data);
            // check ll is empty -if yes then new node directly become head node
            if (isEmpty()) {
                head = newNode;
                return;
            }
            newNode.next = head;
            head = newNode;
        }

        // pop()
        public static int pop() {

            // check if stack is empty or not
            if (isEmpty()) {
                return -1;
            }

            // remove head, make next node head
            int top = head.data;
            // head.next = null; -value return and removed, this line is not needed
            head = head.next;
            return top;
        }

        public static int peek() {
            // check if stack is empty
            if (isEmpty()) {
                return -1;
            }
            return head.data; // headdata =top of stack
        }
    }

    public static void main(String[] args) {
        // creating Stack
        Stack s = new Stack();
        s.push(1);
        s.push(2);
        s.push(3);

        while (!s.isEmpty()) {
            System.out.println(s.peek()); // see
            s.pop(); // delete
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                        Stack using Java Collection Framework

import java.util.*;

public class StackB {

    public static void main(String[] args) {
        // creating Stack
        Stack<Integer> s = new Stack<>();
        s.push(1);
        s.push(2);
        s.push(3);

        while (!s.isEmpty()) {
            System.out.println(s.peek());
            s.pop();
        }
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                              Push At Bottom of the Stack
import java.util.*;

public class StackB {

    public static void pushAtBottom(Stack<Integer> s, int data) {
        if (s.isEmpty()) {
            s.push(data);
            return;
        }

        // while moving upward
        int top = s.pop();
        pushAtBottom(s, data);
        s.push(top);
    }

    public static void main(String[] args) {
        // creating Stack
        Stack<Integer> s = new Stack<>();
        s.push(1);
        s.push(2);
        s.push(3);
        pushAtBottom(s, 4);
        while (!s.isEmpty()) {
            System.out.println(s.pop());
        }
    }
}


output:-
3
2
1
4
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                            Reverse a string using stack




------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



