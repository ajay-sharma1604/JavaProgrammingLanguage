                                                                                    Stack using ArrayList

import java.util.ArrayList;

public class StackB {

    static class Stack {
        // creating ArrayList
        static ArrayList<Integer> list = new ArrayList<>();

        // isEmpty()
        public static boolean isEmpty() {
            return list.size() == 0;
        }

        // push
        public static void push(int data) { // data- to push
            list.add(data);
        }

        // pop
        public static int pop() {
            // list empty
            if (isEmpty()) { // when function return true
                return -1;
            }
            int top = list.get(list.size() - 1); // store value before deleting
            list.remove(list.size() - 1); // delete
            return top;
        }

        // peek
        public static int peek() {
            // list empty
            if (isEmpty()) {
                return -1;
            }
            return list.get(list.size() - 1);
        }
    }

    public static void main(String[] args) {
        // creating stack
        Stack s = new Stack();
        // PERFORMNG PUSH OPERATION
        s.push(1);
        s.push(2);
        s.push(3);

        // Run loop until stack gets empty
        while (!s.isEmpty()) {
            System.out.println(s.peek());
            s.pop();
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                    Stack using LinkedList
public class StackB {
    // Node class representing node of linked list
    static class Node {
        int data;
        Node next;

        // constructor
        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    static class Stack {
        // creating Head node -static type so all func able to access this

        static Node head = null; // initialize head with null

        // isEmpty()
        public static boolean isEmpty() {
            return head == null; // when head is null then ll is empty return true, else false
        }

        // push()
        public static void push(int data) {
            // create new node
            Node newNode = new Node(data);
            // check ll is empty -if yes then new node directly become head node
            if (isEmpty()) {
                head = newNode;
                return;
            }
            newNode.next = head;
            head = newNode;
        }

        // pop()
        public static int pop() {

            // check if stack is empty or not
            if (isEmpty()) {
                return -1;
            }

            // remove head, make next node head
            int top = head.data;
            // head.next = null; -value return and removed, this line is not needed
            head = head.next;
            return top;
        }

        public static int peek() {
            // check if stack is empty
            if (isEmpty()) {
                return -1;
            }
            return head.data; // headdata =top of stack
        }
    }

    public static void main(String[] args) {
        // creating Stack
        Stack s = new Stack();
        s.push(1);
        s.push(2);
        s.push(3);

        while (!s.isEmpty()) {
            System.out.println(s.peek()); // see
            s.pop(); // delete
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                        Stack using Java Collection Framework

import java.util.*;

public class StackB {

    public static void main(String[] args) {
        // creating Stack
        Stack<Integer> s = new Stack<>();
        s.push(1);
        s.push(2);
        s.push(3);

        while (!s.isEmpty()) {
            System.out.println(s.peek());
            s.pop();
        }
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                              Push At Bottom of the Stack
import java.util.*;

public class StackB {

    public static void pushAtBottom(Stack<Integer> s, int data) {
        if (s.isEmpty()) {
            s.push(data);
            return;
        }

        // while moving upward
        int top = s.pop();
        pushAtBottom(s, data);
        s.push(top);
    }

    public static void main(String[] args) {
        // creating Stack
        Stack<Integer> s = new Stack<>();
        s.push(1);
        s.push(2);
        s.push(3);
        pushAtBottom(s, 4);
        while (!s.isEmpty()) {
            System.out.println(s.pop());
        }
    }
}


output:-
3
2
1
4
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                            Reverse a string using stack

import java.util.*;

public class StackB {

    public static String reverseString(String str) {
        Stack<Character> s = new Stack<>();
        int idx = 0;
        while (idx < str.length()) {
            s.push(str.charAt(idx));
            idx++;
        }

        StringBuilder sb = new StringBuilder();
        while (!s.isEmpty()) { // until stack gets empty - pop and save
            char curr = s.pop();
            sb.append(curr);
        }
        return sb.toString();
    }

    public static void main(String[] args) {
        String str = "abc";
        String result = reverseString(str);
        System.out.println(result);
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                      Reverse a stack

import java.util.*;

public class StackB {

    public static void pushAtBottom(Stack<Integer> s, int data) {
        if (s.isEmpty()) {
            s.push(data);
            return;
        }

        // while moving upward
        int top = s.pop();
        pushAtBottom(s, data);
        s.push(top);
    }

    public static void reverseStack(Stack<Integer> s) {

        if (s.isEmpty()) {
            return; // nothing to do when stack is empty because empty stack is also a reveresed
                    // stack
        }
        // pop top-while moving upward
        int top = s.pop();
        reverseStack(s); // call for next level
        // again push elements in stack at bottom - call SpushAtBottom
        pushAtBottom(s, top);
    }

    public static void printStack(Stack<Integer> s) {
        while (!s.isEmpty()) {
            System.out.println(s.pop());
        }
    }

    public static void main(String[] args) {
        Stack<Integer> s = new Stack();
        s.push(1);
        s.push(2);
        s.push(3);
        // 3,2,1
        reverseStack(s);
        printStack(s);
        // 1,2,3
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                  Stock Span Problem

import java.util.*;

public class StackB {

    public static void stockSpan(int stocks[], int span[]) {

        // create stack
        Stack<Integer> s = new Stack<>();

        // 0th index i.e for 1st day span value is always 1,always push index 0 at stach
        span[0] = 1;
        s.push(0);

        // calculate span of each day
        for (int i = 1; i < stocks.length; i++) {
            int currPrice = stocks[i];
            while (!s.isEmpty() && currPrice >= stocks[s.peek()]) {
                s.pop(); // remove all elements smaller than or equal to than curr
            }
            // small elements remove karte karte stack empty??
            if (s.isEmpty()) {
                span[i] = i + 1;
            } else {
                int prevHigh = s.peek();
                span[i] = i - prevHigh;
            }

            s.push(i);
        }
    }

    public static void main(String args[]) {
        int stocks[] = { 100, 80, 60, 70, 60, 85, 100 };
        int span[] = new int[stocks.length];
        stockSpan(stocks, span);

        for (int i = 0; i < span.length; i++) {
            System.out.println((span[i] + " "));
        }
    }
}


output:-
1 
1 
1 
2 
1 
5
7

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                  Next Greater Element


import java.util.*;

public class StackB {
    public static void main(String[] args) {
        int arr[] = { 6, 8, 0, 1, 3 };
        int nextGreater[] = new int[arr.length];
        Stack<Integer> s = new Stack<>();

        for (int i = arr.length - 1; i >= 0; i--) { // change this loop for nextgreater-left
            // while loop
            while (!s.isEmpty() && arr[s.peek()] <= arr[i]) { // arr[s.peek()] =value at stack index
                s.pop(); // for smaller el present in stack
            }

            // if-else
            if (s.isEmpty()) { // stack is empty
                nextGreater[i] = -1;
            } else {
                nextGreater[i] = arr[s.peek()]; // store values not index
            }

            // push element-index in stack -helps in tracking
            s.push(i);
        }

        for (int i = 0; i < nextGreater.length; i++) {
            System.out.print(nextGreater[i] + " ");
        }
        System.out.println();
    }

}

// diff forms of questions: 

// 1) nextGreater left- for (int i = 0; i < arr.length; i++)

// 2) nextSmaller right - {
// for (int i = arr.length - 1; i >= 0; i--)
// while (!s.isEmpty() && arr[s.peek()] >= arr[i]) remove large elements
// }

// 3) nextSmaller left - {
// for (int i = 0; i < arr.length; i++)
// while (!s.isEmpty() && arr[s.peek()] >= arr[i]) remove large elements
// }


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                    Valid Parentheses

import java.util.*;

public class Basics {

    public static boolean isValid(String str) {
        Stack<Character> s = new Stack<>();

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);

            if (ch == '(' || ch == '{' || ch == '[') { // opening
                s.push(ch);
            } else { // closing -if stack empty no opening exist then simply exit in starting
                if (s.isEmpty()) {
                    return false;
                }
                // if (stack is non empty) and (top of stack is closing and ch is opening)-PAIR
                // then
                // pop
                if ((s.peek() == '(' && ch == ')') || (s.peek() == '{' && ch == '}') || (s.peek() == '['
                        && ch == ']')) {
                    s.pop();
                } else {// no pair
                    return false;
                }

            }
        }

        if (s.isEmpty()) {
            return true;
        } else {
            return false;
        }
    }

    public static void main(String[] args) {
        String str = "()({})[]";
        System.out.println(isValid(str));
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                  Duplicate Parentheses


import java.util.*;

public class Basics {

    public static boolean isDuplicate(String str) {
        Stack<Character> s = new Stack<>();

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);

            // closing
            if (ch == ')') {
                int count = 0;
                while (s.peek() != '(') {
                    s.pop();
                    count++;
                }
                if (count < 1) {
                    return true; // duplicate
                } else {
                    s.pop(); // opening pair
                }
            } else {
                // openingcond -operator, operands, extra pair
                s.push(ch);

            }

        }
        return false;
    }

    public static void main(String[] args) {
        String str1 = "((a+b))"; // true-duplicate
        String str2 = "(a-b)"; // false
        System.out.println(isDuplicate(str2));
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                        Max Area or Maximum Rectangular Area in Histogram



import java.util.*;

public class Basics {

    public static void maxArea(int arr[]) { // O(3n) =O(n) -optimised code
        int maxArea = 0;
        int nsr[] = new int[arr.length];
        int nsl[] = new int[arr.length];

        // Next Smaller Right =O(n)
        Stack<Integer> s = new Stack<>();
        for (int i = arr.length - 1; i >= 0; i--) {
            while (!s.isEmpty() && arr[s.peek()] >= arr[i]) {
                s.pop();
            }
            if (s.isEmpty()) {
                nsr[i] = arr.length;
            } else {
                nsr[i] = s.peek();
            }
            s.push(i);
        }

        // Next Smaller Left =O(n)
        s = new Stack<>(); // stack empty

        for (int i = 0; i < arr.length; i++) {
            while (!s.isEmpty() && arr[s.peek()] >= arr[i]) {
                s.pop();
            }
            if (s.isEmpty()) {
                nsl[i] = -1;
            } else {
                nsl[i] = s.peek();
            }
            s.push(i);
        }

        // Current Area : width =j-i-1 =nsr[i] -nsl[i] -1 =O(n)
        for (int i = 0; i < arr.length; i++) {
            int height = arr[i];
            int width = nsr[i] - nsl[i] - 1;
            int currArea = height * width;
            maxArea = Math.max(currArea, maxArea);
        }
        System.out.println("max area in histogram = " + maxArea);
    }

    public static void main(String[] args) {
        int height[] = { 2, 1, 5, 6, 2, 3 };// heights in histogram
        maxArea(height);
    }
}
