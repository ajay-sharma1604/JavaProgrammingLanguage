                                                        Fibonacci - Memoization and Tabulation


public class Basics {

            //Memoization- O(n)

    public static int fibMemoization(int dp[], int n) {
        // base case
        if (n == 0 || n == 1) {
            return n;
        }
        if (dp[n] != 0) {
            return dp[n];
        }
        dp[n] = fibMemoization(dp, n - 1) + fibMemoization(dp, n - 2);
        return dp[n];
    }

            //Tabulation - O(n)
    public static int fibTabulation(int n) {
        int dp[] = new int[n + 1];
        dp[0] = 0;
        dp[1] = 1;

        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }

    public static void main(String[] args) {
        int n = 5;
        int dp[] = new int[n + 1];
        System.out.println(fibMemoization(dp, n));
        System.out.println(fibTabulation(n));
    }
}

Output- 5

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                          Climbing Stairs ( Recursion , Memoization , Tabulation )

import java.util.Arrays;

public class Basics {

    // Recursion- O(2^n)

    public static int climbingStairs(int n) {
        // basecase
        if (n < 0) {
            return 0;
        }
        if (n == 0) {
            return 1;
        }
        // recursion
        return climbingStairs(n - 1) + climbingStairs(n - 2);
    }

    // Memoization -O(n)

    public static int climbingStairs2(int n, int ways[]) {
        // basecase
        if (n < 0) {
            return 0;
        }
        if (n == 0) {
            return 1;
        }

        // recursion + Storage
        if (ways[n] != -1) {
            return ways[n];
        }
        ways[n] = climbingStairs2(n - 1, ways) + climbingStairs2(n - 2, ways);
        return ways[n];
    }

    // Tabulation- O(n)

    public static int climbingStairs3(int n) {
        int dp[] = new int[n + 1];
        dp[0] = 1;

        for (int i = 1; i <= n; i++) {
            if (i == 1) {
                dp[i] = dp[i - 1] + 0;
            } else {
                dp[i] = dp[i - 1] + dp[i - 2];
            }
        }
        return dp[n];
    }

    public static void main(String[] args) {
        int n = 5;

        // recursion
        // System.out.println(climbingStairs(n));

        // memoization
        int ways[] = new int[n + 1];
        Arrays.fill(ways, -1);
        // System.out.println(climbingStairs2(n, ways));

        // Tabulation
        // System.out.println(climbingStairs3(n));

    }
}

Output:- 8
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

                             *********************    0-1 Knapsack ( recursion ) ***************************

public class Basics {

    public static int knapsack(int val[], int wt[], int W, int n) { // n-item no
        // Basecase
        if (W == 0 || n == 0) {
            return 0;
        }

        // Recursion

        // case1:- Valid Condition
        if (wt[n - 1] <= W) { // n-1 =last index

            // include
            int ans1 = val[n - 1] + knapsack(val, wt, W - wt[n - 1], n - 1);

            // exclude
            int ans2 = knapsack(val, wt, W, n - 1);

            return Math.max(ans1, ans2);
        }

        // case2:- Invalid Condition
        else {

            //exclude
            return knapsack(val, wt, W, n - 1);
        }
    }

    public static void main(String[] args) {
        int val[] = { 15, 14, 10, 45, 30 };
        int wt[] = { 2, 5, 1, 3, 4 };
        int W = 7; // capacity
        System.out.println(knapsack(val, wt, W, val.length));
    }
}


                        *********************    0-1 Knapsack ( Memoization ) *************************** O(n*W)

public class Basics {

    public static int knapsack(int val[], int wt[], int W, int n, int dp[][]) { // n-item no
        // Basecase
        if (W == 0 || n == 0) {
            return 0;
        }

        if (dp[n][W] != -1) {
            return dp[n][W];
        }

        // Recursion

        // case1:- Valid Condition
        if (wt[n - 1] <= W) { // n-1 =last index

            // include
            int ans1 = val[n - 1] + knapsack(val, wt, W - wt[n - 1], n - 1, dp);

            // exclude
            int ans2 = knapsack(val, wt, W, n - 1, dp);

            dp[n][W] = Math.max(ans1, ans2);
            return dp[n][W];
        }

        // case2:- Invalid Condition
        else {

            // exclude
            dp[n][W] = knapsack(val, wt, W, n - 1, dp);
            return dp[n][W];
        }
    }

    public static void main(String[] args) {
        int val[] = { 15, 14, 10, 45, 30 };
        int wt[] = { 2, 5, 1, 3, 4 };
        int W = 7; // capacity
        int dp[][] = new int[val.length+1][W + 1];

        for (int i = 0; i < dp.length; i++) {
            for (int j = 0; j < dp[0].length; j++) {
                dp[i][j] = -1;
            }
        }
        System.out.println(knapsack(val, wt, W, val.length, dp));
    }
}


                                  
                       *********************    0-1 Knapsack ( Tabulation ) ***************************



