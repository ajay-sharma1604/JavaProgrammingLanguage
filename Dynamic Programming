                                                        Fibonacci - Memoization and Tabulation


public class Basics {

            //Memoization- O(n)

    public static int fibMemoization(int dp[], int n) {
        // base case
        if (n == 0 || n == 1) {
            return n;
        }
        if (dp[n] != 0) {
            return dp[n];
        }
        dp[n] = fibMemoization(dp, n - 1) + fibMemoization(dp, n - 2);
        return dp[n];
    }

            //Tabulation - O(n)
    public static int fibTabulation(int n) {
        int dp[] = new int[n + 1];
        dp[0] = 0;
        dp[1] = 1;

        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }

    public static void main(String[] args) {
        int n = 5;
        int dp[] = new int[n + 1];
        System.out.println(fibMemoization(dp, n));
        System.out.println(fibTabulation(n));
    }
}

Output- 5

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                          Climbing Stairs ( Recursion , Memoization , Tabulation )

import java.util.Arrays;

public class Basics {

    // Recursion- O(2^n)

    public static int climbingStairs(int n) {
        // basecase
        if (n < 0) {
            return 0;
        }
        if (n == 0) {
            return 1;
        }
        // recursion
        return climbingStairs(n - 1) + climbingStairs(n - 2);
    }

    // Memoization -O(n)

    public static int climbingStairs2(int n, int ways[]) {
        // basecase
        if (n < 0) {
            return 0;
        }
        if (n == 0) {
            return 1;
        }

        // recursion + Storage
        if (ways[n] != -1) {
            return ways[n];
        }
        ways[n] = climbingStairs2(n - 1, ways) + climbingStairs2(n - 2, ways);
        return ways[n];
    }

    // Tabulation- O(n)

    public static int climbingStairs3(int n) {
        int dp[] = new int[n + 1];
        dp[0] = 1;

        for (int i = 1; i <= n; i++) {
            if (i == 1) {
                dp[i] = dp[i - 1] + 0;
            } else {
                dp[i] = dp[i - 1] + dp[i - 2];
            }
        }
        return dp[n];
    }

    public static void main(String[] args) {
        int n = 5;

        // recursion
        // System.out.println(climbingStairs(n));

        // memoization
        int ways[] = new int[n + 1];
        Arrays.fill(ways, -1);
        // System.out.println(climbingStairs2(n, ways));

        // Tabulation
        // System.out.println(climbingStairs3(n));

    }
}

Output:- 8
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

