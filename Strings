*****************************     Basics(Representation , input , output)  ******************************************

import java.util.*;

public class Basics{
    public static void main(String[] args) {
        //representation of string

        String str = "abcd";
        //or
        String str2 = new String("xyz");
        
        //input
        Scanner sc = new Scanner(System.in);
        String name;
        name=sc.nextLine(); //or sc.next()-it takes only single word(no space,no next line)

        //output 
        System.out.println(name);

         //length of string

        String fullName = "Tony Stark";
       
        System.out.println(fullName.length());


    }
}


********************************* Concatination *******************************
import java.util.*;

public class Basics{
    public static void main(String[] args) {
      String firstName = "Ajay";
      String lastName = "Sharma";
      String fullName = firstName + " " +  lastName;
      System.out.println(fullName);
    }
}

Output: Ajay Sharma


******************************** CharAt method //finding out character at any index in a string *********************************

public class Basics{

    public static void printLetters(String fullName){
        for(int i=0;i<fullName.length();i++){
            System.out.print(fullName.charAt(i) + " ");
        }
        System.out.println();
    }
    public static void main(String[] args) {
        String firstName = "Ajay";
        String lastName = "Sharma";
        String fullName = firstName + " " + lastName;
        System.out.println(fullName.charAt(4));
        printLetters(fullName);
    }
}


***************************** String is Pallindrome or not ***************************

public class Basics{

    public static boolean isPallindrome(String str){
      int n =str.length();
        for(int i =0; i<str.length()/2;i++){
    
            if(str.charAt(i)!=str.charAt(n-1-i)){
                //not palindrome
                return false;
            }
        }
        //string is palindrome
        return true;
    }
    public static void main(String[] args) {
        String str = "racecar";
        System.out.println(isPallindrome(str));
        
    }
}


******************************* Shortest Path ****************************************

public class Basics{

    public static float shortestPath(String path){
        int x=0,y=0;
        for(int i=0;i<path.length();i++){
            char currpath = path.charAt(i);
            //East
            if(currpath == 'E'){
                x++;
            }
            //West
            else if(currpath == 'W'){
                x--;
            }
            //North
            else if(currpath == 'N'){
                y++;
            }
            //South
            else{
                y--;
            }
        }
       int X2 = x*x;
       int Y2 = y*y;
       return (float)Math.sqrt(X2 + Y2);
    }
    public static void main(String[] args) {
        String path ="WNEENESENNN";
        System.out.println(shortestPath(path));
    }
}


**************************** Comparison of Strings *********************************

public class Basics{
    public static void main(String[] args) {
        String s1 = "Tony";
        String s2 ="Tony";
        String s3 = new String("Tony");

        //== operator works fine for s1 and s2

        if(s1==s2){
            System.out.println("Strings are equal");
        }
        else{
              System.out.println("Strings are not equal");
        }

        //.equals will work for comparing with s3

        if(s1.equals(s3)){
            System.out.println("Strings are equal");
        }
        else{
            System.out.println("Strings are not equal");
        }


        if(s2.equals(s3)){
            System.out.println("Strings are equal");
        }
        else{
            System.out.println("Strings are not equal");
        }

    }
}


***************************** Substrings ****************************

(self) -In my program no substring is created only character is printing 

public class Basics{

    public static void printSubstring(String str,int si,int ei){
        for(int i=si;i<ei;i++){
            System.out.print(str.charAt(i));
        }
    }
    public static void main(String[] args) {
        String str = "Helloworld";
        printSubstring(str,0,4);
        //System.out.println(str.substring(3,5));
    }
}


Above in different way:-(original) -IN this first substring is created and then it gets printed

public class Basics{

    public static String substring(String str,int si,int ei){
        String substr ="";
        for(int i=si;i<ei;i++){
            substr += str.charAt(i);
        }
        return substr;
    }   
    public static void main(String[] args) {
        String str = "Helloworld";
        System.out.println(substring(str,0,5));
        
    }
}


--------------------------- By default java already have a substring function -------------------------

public class Basics{
    public static void main(String[] args) {
        String str = "Helloworld";
        System.out.println(str.substring(0, 5));
        
    }
}


**************************** Print Largest String ***************************

public class Basics{
    public static void main(String[] args) {
        String fruits[] ={"apple","mango","banana"};
        String largest = fruits[0];
        for(int i=1;i<fruits.length;i++){
           if( largest.compareTo(fruits[i]) < 0){
           largest =  fruits[i];
           }
        }
        System.out.println(largest);
    }
}


***************** String Builder ***************************

public class Basics{
    public static void main(String[] args) {
        StringBuilder sb = new StringBuilder("");
        for(char ch ='a'; ch<='z';ch++){
            sb.append(ch);
        }
        System.out.println(sb);
        System.out.println(sb.length());
    }
}


***************************** Convert letters to uppercase *************************

public class Basics{

    public static String toUpperCase(String str){
        StringBuilder sb = new StringBuilder("");
       char ch = Character.toUpperCase(str.charAt(0)); //done for 1st word
        sb.append(ch);

        //for next words
        for(int i=1;i<str.length();i++){
            if(str.charAt(i)== ' ' && i<str.length()-1){
                sb.append(str.charAt(i));
                i++;
                sb.append(Character.toUpperCase(str.charAt(i)));
            }
            else{
                 sb.append(str.charAt(i));
            }
        }
        return sb.toString();  //since stringbuilder is not of string type so we converted it into string first beg=fore returning;

    }
    public static void main(String[] args) {
        String str ="hello WORLD";
        System.out.println(toUpperCase(str));
    }
}


******************************************  String Compression ********************************************

----------- using stringbuilder ---------

public class Basics{

    public static String compressString(String str){
        StringBuilder sb = new StringBuilder("");
        
        for(int i=0;i<str.length();i++){
            Integer count = 1;
            while(i<str.length()-1 && str.charAt(i)==str.charAt(i+1)){
                count++;
                i++;
            }
            sb.append(str.charAt(i));
            if(count>1){
                sb.append(count.toString());
            }
        }
        return sb.toString();
    }
    public static void main(String[] args) {
        String str = new String("aaabbcccdd");
        System.out.println(compressString(str));
    }
}


------------ using string --------------------

public class Basics{

    public static String compressString(String str){
        //StringBuilder sb = new StringBuilder("");
        String newStr ="";
        
        for(int i=0;i<str.length();i++){
            Integer count = 1;
            while(i<str.length()-1 && str.charAt(i)==str.charAt(i+1)){
                count++;
                i++;
            }
            //sb.append(str.charAt(i));
            newStr += str.charAt(i);
            if(count>1){
               // sb.append(count.toString());
               newStr += count.toString();
            }
        }
        //return sb.toString();
        return newStr;
    }
    public static void main(String[] args) {
        String str = new String("aaabbcccdd");
        System.out.println(compressString(str));
    }
}

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
Practice question:- 

question:-Count how many times lowercase vowels occurred in a String entered by the user

import java.util.*;
public class Basics{

    public static void main(String[] args) {
    Scanner sc =new Scanner(System.in);
    System.out.println("Please input the String");
    String str = sc.nextLine();
    int count = 0;
    for(int i=0;i<str.length();i++){
        if(str.charAt(i)== 'a') {
            count++;
        }
        else if(str.charAt(i)== 'e') {
            count++;
        }
        else if(str.charAt(i)== 'i') {
            count++;
        }
        else if (str.charAt(i)== 'o') {
            count++;
        }
        else if(str.charAt(i)== 'u') {
            count++;
        }
    }
    System.out.println(count);

    }
}
