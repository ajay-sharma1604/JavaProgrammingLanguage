                                                             Priority Queue

import java.util.Comparator;
import java.util.PriorityQueue; //importing pq

public class Basics {
    public static void main(String[] args) {
        // creating pq
        // PriorityQueue<Integer> pq = new PriorityQueue<>();

        // to change bydefault ascending to descending
        PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.reverseOrder());

        // ADD- O(logn) -n is the number of already present in pq
        pq.add(3);
        pq.add(4);
        pq.add(1);
        pq.add(7);

        // peek and remove
        while (!pq.isEmpty()) {
            System.out.println(pq.peek());// O(1)
            pq.remove(); // O(logn)
            // highest priority element by default remove and peek
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                          PQ for Objects

import java.util.Comparator;
import java.util.PriorityQueue; //importing pq

public class Basics {
    // class with comparable objects

    static class Student implements Comparable<Student> { // overriding
        String name;
        int rank;

        public Student(String name, int rank) {
            this.name = name;
            this.rank = rank;
        }

        @Override
        public int compareTo(Student s2) {
            return this.rank - s2.rank; // rank basis sorting
        }
    }

    public static void main(String[] args) {
        // adding student obj in pq
        // PriorityQueue<Student> pq = new PriorityQueue<>();
        PriorityQueue<Student> pq = new PriorityQueue<>(Comparator.reverseOrder());

        // ADD
        pq.add(new Student("A", 4));
        pq.add(new Student("B", 5));
        pq.add(new Student("C", 2));
        pq.add(new Student("D", 12));

        // Student sorted on the basis of rank
        while (!pq.isEmpty()) {
            System.out.println(pq.peek().name + "->" + pq.peek().rank);// O(1)
            pq.remove();
        }
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                       Insert in heap

import java.util.*;

public class Basics {

    static class Heap {
        ArrayList<Integer> arr = new ArrayList<>();

        public void add(int data) { // O(logn)
            // add at last idx
            arr.add(data);

            // child idx
            int x = arr.size() - 1;
            // parent idx
            int par = (x - 1) / 2;

            // CHILD VAL<PARENT VAL

            while (arr.get(x) < arr.get(par)) { // O(logn)
                // swap
                int temp = arr.get(x);
                arr.set(x, arr.get(par)); // child idx -par value store
                arr.set(par, temp); // par idx =child value store

                 x = par;
                par = (x - 1) / 2;
            }
        }
    }

    public static void main(String[] args) {
        
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                        Peek in Heap

 public int peek() {
            return arr.get(0);
        }


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                      Remove from heap


import java.util.*;

public class Basics {

    static class Heap {
        ArrayList<Integer> arr = new ArrayList<>();

        public void add(int data) {
            arr.add(data);
            int x = arr.size() - 1;
            int par = (x - 1) / 2;
            while (arr.get(x) < arr.get(par)) {
                int temp = arr.get(x);
                arr.set(x, arr.get(par));
                arr.set(par, temp);

                x = par;
                par = (x - 1) / 2;
            }
        }

        public int peek() {
            return arr.get(0);
        }

        private void heapify(int i) {
            int left = 2 * i + 1;
            int right = 2 * i + 2;
            int minIdx = i;

            if (left < arr.size() && arr.get(minIdx) > arr.get(left)) {
                minIdx = left;
            }

            if (right < arr.size() && arr.get(minIdx) > arr.get(right)) {
                minIdx = right;
            }

            // swap root with minIdx node
            if (minIdx != i) { // if needed to fix
                // swap
                int temp = arr.get(i);
                arr.set(i, arr.get(minIdx));
                arr.set(minIdx, temp);

                // swapping may affect other nodes, so fixing them also
                heapify(minIdx);
            }
        }

        public int remove() {
            int data = arr.get(0);

            // step1 -swap first and last
            int temp = arr.get(0);
            arr.set(0, arr.get(arr.size() - 1));
            arr.set(arr.size() - 1, temp);

            // step2 -delete last
            arr.remove(arr.size() - 1);

            // step3 -heapify
            heapify(0);
            return data;
        }

        public boolean isEmpty() {
            return arr.size() == 0;
        }
    }

    public static void main(String[] args) {
        Heap h = new Heap();
        h.add(3);
        h.add(4);
        h.add(1);
        h.add(5);

        while (!h.isEmpty()) {
            System.out.println(h.peek());
            h.remove();
        }
    }
}

Output:-
1
3
4
5

*************************************************************************   For Max Heap ***************************************************************************************************

import java.util.*;

public class Basics {

    //changes-add-1,heapify-2, maxIdx

    static class Heap {
        ArrayList<Integer> arr = new ArrayList<>();

        public void add(int data) {
            arr.add(data);
            int x = arr.size() - 1;
            int par = (x - 1) / 2;
            while (arr.get(x) > arr.get(par)) { **************************
                int temp = arr.get(x);
                arr.set(x, arr.get(par));
                arr.set(par, temp);

                x = par;
                par = (x - 1) / 2;
            }
        }

        public int peek() {
            return arr.get(0);
        }

        private void heapify(int i) {
            int left = 2 * i + 1;
            int right = 2 * i + 2;
            int minIdx = i; //change to maxIdx ******************************

            if (left < arr.size() && arr.get(minIdx) < arr.get(left)) { ********************
                minIdx = left;
            }

            if (right < arr.size() && arr.get(minIdx) < arr.get(right)) { *************************
                minIdx = right;
            }

            // swap root with minIdx node
            if (minIdx != i) { // if needed to fix
                // swap
                int temp = arr.get(i);
                arr.set(i, arr.get(minIdx));
                arr.set(minIdx, temp);

                // swapping may affect other nodes, so fixing them also
                heapify(minIdx);
            }
        }

        public int remove() {
            int data = arr.get(0);

            // step1 -swap first and last
            int temp = arr.get(0);
            arr.set(0, arr.get(arr.size() - 1));
            arr.set(arr.size() - 1, temp);

            // step2 -delete last
            arr.remove(arr.size() - 1);

            // step3 -heapify
            heapify(0);
            return data;
        }

        public boolean isEmpty() {
            return arr.size() == 0;
        }
    }

    public static void main(String[] args) {
        Heap h = new Heap();
        h.add(3);
        h.add(4);
        h.add(1);
        h.add(5);

        while (!h.isEmpty()) {
            System.out.println(h.peek());
            h.remove();
        }
    }
}

Output:-
5
4
3
1

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                          
                                                        HeapSort(Ascending order -maxHeap)

import java.util.*;

public class Basics {

    public static void heapify(int arr[], int i, int size) {
        int left = 2 * i + 1;
        int right = 2 * i + 2;
        int maxIdx = i;

        if (left < size && arr[left] > arr[maxIdx]) {
            maxIdx = left;
        }

        if (right < size && arr[right] > arr[maxIdx]) {
            maxIdx = right;
        }

        if (maxIdx != i) {
            // swap
            int temp = arr[i];
            arr[i] = arr[maxIdx];
            arr[maxIdx] = temp;

            heapify(arr, 0, i);
        }
    }

    public static void heapSort(int arr[]) {

        // step1 -build maxHeap
        int n = arr.length;
        for (int i = n / 2; i >= 0; i--) {

            // passing size bcz next time heapify call we need to tell that the size has now
            // become this.
            heapify(arr, i, n); // O(n/2*logn) =O(nlogn)

            // calling for idx i and heap size=n
        }

        // step2 -push largest at end
        for (int i = n - 1; i > 0; i--) {
            // swap(largest-firstelemenet,  with last idx element)
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;

            // calling for root(top-down), size =i
            heapify(arr, 0, i); // O(nlogn)
            // last idx will be the new size for next level of heap

        }
    }

    public static void main(String args[]) {
        int arr[] = { 1, 2, 4, 5, 3 };
        heapSort(arr);

        // print
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }
}

// O(2nlogn) =O(nlogn)

Output:-
1 2 3 4 5


********************************************* Descending order(minHeap) ********************

import java.util.*;

public class Basics {

    public static void heapify(int arr[], int i, int size) {
        int left = 2 * i + 1;
        int right = 2 * i + 2;
        int minIdx = i;

        if (left < size && arr[left] < arr[minIdx]) {
            minIdx = left;
        }

        if (right < size && arr[right] < arr[minIdx]) {
            minIdx = right;
        }

        if (minIdx != i) {
            // swap
            int temp = arr[i];
            arr[i] = arr[minIdx];
            arr[minIdx] = temp;

            heapify(arr, 0, i);
        }
    }

    public static void heapSort(int arr[]) {

        // step1 -build minHeap
        int n = arr.length;
        for (int i = n / 2; i >= 0; i--) {

            // passing size bcz next time heapify call we need to tell that the size has now
            // become this.
            heapify(arr, i, n); // O(n/2*logn) =O(nlogn)

            // calling for idx i and heap size=n
        }

        // step2 -push smallest at end
        for (int i = n - 1; i > 0; i--) {
            // swap(smallest-first element,  with last idx)
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;

            // calling for root(top-down), size =i
            heapify(arr, 0, i); // O(nlogn)
            // last idx will be the new size for next level of heap

        }
    }

    public static void main(String args[]) {
        int arr[] = { 1, 2, 4, 5, 3 };
        heapSort(arr);

        // print
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }
}

// O(2nlogn) =O(nlogn)

Output:-
5 4 3 2 1
=-------------------------------------------------------------------------------------------------------------------
                                                  Nearby Cars
import java.util.*;

public class Basics {

    static class Point implements Comparable<Point> {
        int x;
        int y;
        int distSq;
        int idx;

        public Point(int x, int y, int distSq, int idx) {
            this.x = x;
            this.y = y;
            this.distSq = distSq;
            this.idx = idx;
        }

        @Override
        public int compareTo(Point p2) {
            return this.distSq - p2.distSq; // ascending order
        }
    }

    public static void main(String[] args) {
        int pts[][] = { { 3, 3 }, { 5, -1 }, { -2, 4 } };
        int k = 2;

        PriorityQueue<Point> pq = new PriorityQueue<>();
        for (int i = 0; i < pts.length; i++) {
            int distSq = pts[i][0] * pts[i][0] + pts[i][1] * pts[i][1];
            pq.add(new Point(pts[i][0], pts[i][1], distSq, i));
        }

        // nearest k cars
        for (int i = 0; i < k; i++) {
            System.out.println("C" + pq.remove().idx);
        }
    }
}

Output:-
C0
C2

-----------------------------------------------------------------------------------------------------------------------------------------------------------
                                                        Connect N ropes


import java.util.*;

public class Basics {
    public static void main(String[] args) {
        int ropes[] = { 2, 3, 3, 4, 6 };

        // creating pq
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for (int i = 0; i < ropes.length; i++) {
            pq.add(ropes[i]);
        }

        int cost = 0;
        while (pq.size() > 1) {// until pq have single rope
            int min = pq.remove();
            int min2 = pq.remove();
            cost += min + min2;
            pq.add(min + min2); // removed 2 values and added single value
        }

        System.out.println("cost of connecting n ropes = " + cost);
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------
                                                        Weakest Soldier


import java.util.*;

public class Basics {

    static class Row implements Comparable<Row> {
        int soldiers;
        int idx;

        public Row(int soldiers, int idx) {
            this.soldiers = soldiers;
            this.idx = idx;
        }

        @Override
        public int compareTo(Row r2) {
            if (this.soldiers == r2.soldiers) { // when soldiers count equal compare on basis of idx
                return this.idx - r2.idx;
            } else {
                return this.soldiers - r2.soldiers; // when soldiers count are not equal compare on basis of soldier
            }
        }
    }

    public static void main(String[] args) {
        int army[][] = { { 1, 0, 0, 0 }, { 1, 1, 1, 1 }, { 1, 0, 0, 0 }, { 1, 0, 0, 0 } };
        int k = 2;

        PriorityQueue<Row> pq = new PriorityQueue<>();
        for (int i = 0; i < army.length; i++) {
            int count = 0;
            // counting soldiers
            for (int j = 0; j < army[0].length; j++) {
                count += army[i][j] == 1 ? 1 : 0; // soldier khada hai toh add1 other add 0
            }
            pq.add(new Row(count, i)); // all rows will be added in pq
        }

        // print k weakest
        for (int i = 0; i < k; i++) {
            System.out.println("R" + pq.remove().idx);
        }

    }
}

Output:-
R0
R2

-----------------------------------------------------------------------------------------------------------------------------------------------------------

                                                Sliding Window Maximum




