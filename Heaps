                                                                                        Priority Queue

import java.util.Comparator;
import java.util.PriorityQueue; //importing pq

public class Basics {
    public static void main(String[] args) {
        // creating pq
        // PriorityQueue<Integer> pq = new PriorityQueue<>();

        // to change bydefault ascending to descending
        PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.reverseOrder());

        // ADD- O(logn) -n is the number of already present in pq
        pq.add(3);
        pq.add(4);
        pq.add(1);
        pq.add(7);

        // peek and remove
        while (!pq.isEmpty()) {
            System.out.println(pq.peek());// O(1)
            pq.remove(); // O(logn)
            // highest priority element by default remove and peek
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                                PQ for Objects

import java.util.Comparator;
import java.util.PriorityQueue; //importing pq

public class Basics {
    // class with comparable objects

    static class Student implements Comparable<Student> { // overriding
        String name;
        int rank;

        public Student(String name, int rank) {
            this.name = name;
            this.rank = rank;
        }

        @Override
        public int compareTo(Student s2) {
            return this.rank - s2.rank; // rank basis sorting
        }
    }

    public static void main(String[] args) {
        // adding student obj in pq
        // PriorityQueue<Student> pq = new PriorityQueue<>();
        PriorityQueue<Student> pq = new PriorityQueue<>(Comparator.reverseOrder());

        // ADD
        pq.add(new Student("A", 4));
        pq.add(new Student("B", 5));
        pq.add(new Student("C", 2));
        pq.add(new Student("D", 12));

        // Student sorted on the basis of rank
        while (!pq.isEmpty()) {
            System.out.println(pq.peek().name + "->" + pq.peek().rank);// O(1)
            pq.remove();
        }
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                    Insert in heap

import java.util.*;

public class Basics {

    static class Heap {
        ArrayList<Integer> arr = new ArrayList<>();

        public void add(int data) { // O(logn)
            // add at last idx
            arr.add(data);

            // child idx
            int x = arr.size() - 1;
            // parent idx
            int par = (x - 1) / 2;

            // CHILD VAL<PARENT VAL

            while (arr.get(x) < arr.get(par)) { // O(logn)
                // swap
                int temp = arr.get(x);
                arr.set(x, arr.get(par)); // child idx -par value store
                arr.set(par, temp); // par idx =child value store

                 x = par;
                par = (x - 1) / 2;
            }
        }
    }

    public static void main(String[] args) {
        
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                                        Peek in Heap
 public int peek() {
            return arr.get(0);
        }


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                    Remove from heap


import java.util.*;

public class Basics {

    static class Heap {
        ArrayList<Integer> arr = new ArrayList<>();

        public void add(int data) {
            arr.add(data);
            int x = arr.size() - 1;
            int par = (x - 1) / 2;
            while (arr.get(x) < arr.get(par)) {
                int temp = arr.get(x);
                arr.set(x, arr.get(par));
                arr.set(par, temp);

                x = par;
                par = (x - 1) / 2;
            }
        }

        public int peek() {
            return arr.get(0);
        }

        private void heapify(int i) {
            int left = 2 * i + 1;
            int right = 2 * i + 2;
            int minIdx = i;

            if (left < arr.size() && arr.get(minIdx) > arr.get(left)) {
                minIdx = left;
            }

            if (right < arr.size() && arr.get(minIdx) > arr.get(right)) {
                minIdx = right;
            }

            // swap root with minIdx node
            if (minIdx != i) { // if needed to fix
                // swap
                int temp = arr.get(i);
                arr.set(i, arr.get(minIdx));
                arr.set(minIdx, temp);

                // swapping may affect other nodes, so fixing them also
                heapify(minIdx);
            }
        }

        public int remove() {
            int data = arr.get(0);

            // step1 -swap first and last
            int temp = arr.get(0);
            arr.set(0, arr.get(arr.size() - 1));
            arr.set(arr.size() - 1, temp);

            // step2 -delete last
            arr.remove(arr.size() - 1);

            // step3 -heapify
            heapify(0);
            return data;
        }

        public boolean isEmpty() {
            return arr.size() == 0;
        }
    }

    public static void main(String[] args) {
        Heap h = new Heap();
        h.add(3);
        h.add(4);
        h.add(1);
        h.add(5);

        while (!h.isEmpty()) {
            System.out.println(h.peek());
            h.remove();
        }
    }
}

Output:-
1
3
4
5

*************************************************************************   For Max Heap ***************************************************************************************************

import java.util.*;

public class Basics {

    //changes-add-1,heapify-2, maxIdx

    static class Heap {
        ArrayList<Integer> arr = new ArrayList<>();

        public void add(int data) {
            arr.add(data);
            int x = arr.size() - 1;
            int par = (x - 1) / 2;
            while (arr.get(x) > arr.get(par)) { **************************
                int temp = arr.get(x);
                arr.set(x, arr.get(par));
                arr.set(par, temp);

                x = par;
                par = (x - 1) / 2;
            }
        }

        public int peek() {
            return arr.get(0);
        }

        private void heapify(int i) {
            int left = 2 * i + 1;
            int right = 2 * i + 2;
            int minIdx = i; //change to maxIdx ******************************

            if (left < arr.size() && arr.get(minIdx) < arr.get(left)) { ********************
                minIdx = left;
            }

            if (right < arr.size() && arr.get(minIdx) < arr.get(right)) { *************************
                minIdx = right;
            }

            // swap root with minIdx node
            if (minIdx != i) { // if needed to fix
                // swap
                int temp = arr.get(i);
                arr.set(i, arr.get(minIdx));
                arr.set(minIdx, temp);

                // swapping may affect other nodes, so fixing them also
                heapify(minIdx);
            }
        }

        public int remove() {
            int data = arr.get(0);

            // step1 -swap first and last
            int temp = arr.get(0);
            arr.set(0, arr.get(arr.size() - 1));
            arr.set(arr.size() - 1, temp);

            // step2 -delete last
            arr.remove(arr.size() - 1);

            // step3 -heapify
            heapify(0);
            return data;
        }

        public boolean isEmpty() {
            return arr.size() == 0;
        }
    }

    public static void main(String[] args) {
        Heap h = new Heap();
        h.add(3);
        h.add(4);
        h.add(1);
        h.add(5);

        while (!h.isEmpty()) {
            System.out.println(h.peek());
            h.remove();
        }
    }
}

Output:-
5
4
3
1

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


